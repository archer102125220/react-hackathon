"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _callee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _jsonwebtoken = require("jsonwebtoken");

var _mathRandom = _interopRequireDefault(require("math-random"));

var _updateConnectionStatus = _interopRequireWildcard(require("../actions/updateConnectionStatus"));

var _createPromiseQueue = _interopRequireDefault(require("../createPromiseQueue"));

var _botframeworkDirectlinejs = require("botframework-directlinejs");

var _connect = require("../actions/connect");

var _disconnect = require("../actions/disconnect");

var _marked =
/*#__PURE__*/
_regenerator.default.mark(observeAndPutConnectionStatusUpdate),
    _marked2 =
/*#__PURE__*/
_regenerator.default.mark(connectSaga),
    _marked3 =
/*#__PURE__*/
_regenerator.default.mark(_callee);

var CONNECTING = _botframeworkDirectlinejs.ConnectionStatus.Connecting,
    ONLINE = _botframeworkDirectlinejs.ConnectionStatus.Online,
    EXPIRED_TOKEN = _botframeworkDirectlinejs.ConnectionStatus.ExpiredToken,
    FAILED_TO_CONNECT = _botframeworkDirectlinejs.ConnectionStatus.FailedToConnect,
    ENDED = _botframeworkDirectlinejs.ConnectionStatus.Ended;

function randomUserID() {
  return "r_".concat((0, _mathRandom.default)().toString(36).substr(2, 10));
}

function observeAndPutConnectionStatusUpdate(directLine) {
  var connectionStatusQueue, connectionStatusSubscription, connectionStatus;
  return _regenerator.default.wrap(function observeAndPutConnectionStatusUpdate$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          connectionStatusQueue = (0, _createPromiseQueue.default)();
          connectionStatusSubscription = directLine.connectionStatus$.subscribe({
            next: connectionStatusQueue.push
          });
          _context.prev = 2;

        case 3:
          _context.next = 5;
          return (0, _effects.call)(connectionStatusQueue.shift);

        case 5:
          connectionStatus = _context.sent;
          _context.next = 8;
          return (0, _effects.put)((0, _updateConnectionStatus.default)(connectionStatus));

        case 8:
          _context.next = 3;
          break;

        case 10:
          _context.prev = 10;
          connectionStatusSubscription.unsubscribe();
          return _context.finish(10);

        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this, [[2,, 10, 13]]);
}

function negativeUpdateConnectionStatusAction(_ref) {
  var payload = _ref.payload,
      type = _ref.type;

  if (type === _updateConnectionStatus.UPDATE_CONNECTION_STATUS) {
    var connectionStatus = payload.connectionStatus;
    return connectionStatus !== CONNECTING && connectionStatus !== ONLINE;
  }
}

function rectifyUserID(directLine, userIDFromAction) {
  var token = directLine.token;

  var _ref2 = (0, _jsonwebtoken.decode)(token) || {},
      userIDFromToken = _ref2.user;

  if (userIDFromToken) {
    if (userIDFromAction && userIDFromAction !== userIDFromToken) {
      console.warn('Web Chat: user ID is both specified in the Direct Line token and passed in, will use the user ID from the token.');
    }

    return userIDFromToken;
  } else if (userIDFromAction) {
    if (typeof userIDFromAction !== 'string') {
      console.warn('Web Chat: user ID must be a string.');
      return randomUserID();
    } else if (/^dl_/.test(userIDFromAction)) {
      console.warn('Web Chat: user ID prefixed with "dl_" is reserved and must be embedded into the Direct Line token to prevent forgery.');
      return randomUserID();
    }
  } else {
    return randomUserID();
  }

  return userIDFromAction;
}

function connectSaga(directLine) {
  var activitySubscription, _ref3, connectionStatus;

  return _regenerator.default.wrap(function connectSaga$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          // DirectLineJS start the connection only after the first subscriber for activity$, but not connectionStatus$
          activitySubscription = directLine.activity$.subscribe({
            next: function next() {
              return 0;
            }
          });
          _context2.prev = 1;

        case 2:
          _context2.next = 4;
          return (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS);

        case 4:
          _ref3 = _context2.sent;
          connectionStatus = _ref3.payload.connectionStatus;

          if (!(connectionStatus === ONLINE)) {
            _context2.next = 10;
            break;
          }

          return _context2.abrupt("return", function () {
            activitySubscription.unsubscribe();
            directLine.end();
          });

        case 10:
          if (!(connectionStatus === ENDED || connectionStatus === EXPIRED_TOKEN || connectionStatus === FAILED_TO_CONNECT)) {
            _context2.next = 12;
            break;
          }

          throw new Error('Failed to connect');

        case 12:
          _context2.next = 2;
          break;

        case 14:
          _context2.prev = 14;
          _context2.next = 17;
          return (0, _effects.cancelled)();

        case 17:
          if (!_context2.sent) {
            _context2.next = 20;
            break;
          }

          activitySubscription.unsubscribe();
          throw new Error('Cancelled');

        case 20:
          return _context2.finish(14);

        case 21:
        case "end":
          return _context2.stop();
      }
    }
  }, _marked2, this, [[1,, 14, 21]]);
}

function _callee() {
  var _ref4, _ref4$payload, directLine, userIDFromAction, username, updateConnectionStatusTask, meta, endDirectLine, terminateAction;

  return _regenerator.default.wrap(function _callee$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return (0, _effects.take)(_connect.CONNECT);

        case 2:
          _ref4 = _context3.sent;
          _ref4$payload = _ref4.payload;
          directLine = _ref4$payload.directLine;
          userIDFromAction = _ref4$payload.userID;
          username = _ref4$payload.username;
          _context3.next = 9;
          return (0, _effects.fork)(observeAndPutConnectionStatusUpdate, directLine);

        case 9:
          updateConnectionStatusTask = _context3.sent;
          _context3.prev = 10;
          meta = {
            userID: rectifyUserID(directLine, userIDFromAction),
            username: username
          };
          endDirectLine = void 0;
          _context3.next = 15;
          return (0, _effects.put)({
            type: _connect.CONNECT_PENDING,
            meta: meta
          });

        case 15:
          _context3.prev = 15;
          _context3.next = 18;
          return (0, _effects.call)(connectSaga, directLine);

        case 18:
          endDirectLine = _context3.sent;
          _context3.next = 26;
          break;

        case 21:
          _context3.prev = 21;
          _context3.t0 = _context3["catch"](15);
          _context3.next = 25;
          return (0, _effects.put)({
            type: _connect.CONNECT_REJECTED,
            error: true,
            meta: meta,
            payload: _context3.t0
          });

        case 25:
          return _context3.abrupt("continue", 49);

        case 26:
          _context3.prev = 26;
          _context3.next = 29;
          return (0, _effects.put)({
            type: _connect.CONNECT_FULFILLING,
            meta: meta,
            payload: {
              directLine: directLine
            }
          });

        case 29:
          _context3.next = 31;
          return (0, _effects.put)({
            type: _connect.CONNECT_FULFILLED,
            meta: meta,
            payload: {
              directLine: directLine
            }
          });

        case 31:
          _context3.next = 33;
          return (0, _effects.take)([_disconnect.DISCONNECT, negativeUpdateConnectionStatusAction]);

        case 33:
          terminateAction = _context3.sent;
          _context3.next = 36;
          return (0, _effects.put)({
            type: _disconnect.DISCONNECT_PENDING
          });

        case 36:
          endDirectLine();

          if (!(terminateAction.type === _disconnect.DISCONNECT)) {
            _context3.next = 40;
            break;
          }

          _context3.next = 40;
          return (0, _effects.take)(negativeUpdateConnectionStatusAction);

        case 40:
          _context3.prev = 40;
          _context3.next = 43;
          return (0, _effects.put)({
            type: _disconnect.DISCONNECT_FULFILLED
          });

        case 43:
          endDirectLine();
          return _context3.finish(40);

        case 45:
          _context3.prev = 45;
          _context3.next = 48;
          return (0, _effects.cancel)(updateConnectionStatusTask);

        case 48:
          return _context3.finish(45);

        case 49:
          _context3.next = 0;
          break;

        case 51:
        case "end":
          return _context3.stop();
      }
    }
  }, _marked3, this, [[10,, 45, 49], [15, 21], [26,, 40, 45]]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9jb25uZWN0U2FnYS5qcyJdLCJuYW1lcyI6WyJvYnNlcnZlQW5kUHV0Q29ubmVjdGlvblN0YXR1c1VwZGF0ZSIsImNvbm5lY3RTYWdhIiwiQ09OTkVDVElORyIsIkNvbm5lY3Rpb25TdGF0dXMiLCJDb25uZWN0aW5nIiwiT05MSU5FIiwiT25saW5lIiwiRVhQSVJFRF9UT0tFTiIsIkV4cGlyZWRUb2tlbiIsIkZBSUxFRF9UT19DT05ORUNUIiwiRmFpbGVkVG9Db25uZWN0IiwiRU5ERUQiLCJFbmRlZCIsInJhbmRvbVVzZXJJRCIsInRvU3RyaW5nIiwic3Vic3RyIiwiZGlyZWN0TGluZSIsImNvbm5lY3Rpb25TdGF0dXNRdWV1ZSIsImNvbm5lY3Rpb25TdGF0dXNTdWJzY3JpcHRpb24iLCJjb25uZWN0aW9uU3RhdHVzJCIsInN1YnNjcmliZSIsIm5leHQiLCJwdXNoIiwic2hpZnQiLCJjb25uZWN0aW9uU3RhdHVzIiwidW5zdWJzY3JpYmUiLCJuZWdhdGl2ZVVwZGF0ZUNvbm5lY3Rpb25TdGF0dXNBY3Rpb24iLCJwYXlsb2FkIiwidHlwZSIsIlVQREFURV9DT05ORUNUSU9OX1NUQVRVUyIsInJlY3RpZnlVc2VySUQiLCJ1c2VySURGcm9tQWN0aW9uIiwidG9rZW4iLCJ1c2VySURGcm9tVG9rZW4iLCJ1c2VyIiwiY29uc29sZSIsIndhcm4iLCJ0ZXN0IiwiYWN0aXZpdHlTdWJzY3JpcHRpb24iLCJhY3Rpdml0eSQiLCJlbmQiLCJFcnJvciIsIkNPTk5FQ1QiLCJ1c2VySUQiLCJ1c2VybmFtZSIsInVwZGF0ZUNvbm5lY3Rpb25TdGF0dXNUYXNrIiwibWV0YSIsImVuZERpcmVjdExpbmUiLCJDT05ORUNUX1BFTkRJTkciLCJDT05ORUNUX1JFSkVDVEVEIiwiZXJyb3IiLCJDT05ORUNUX0ZVTEZJTExJTkciLCJDT05ORUNUX0ZVTEZJTExFRCIsIkRJU0NPTk5FQ1QiLCJ0ZXJtaW5hdGVBY3Rpb24iLCJESVNDT05ORUNUX1BFTkRJTkci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QztBQUFBO0FBdUNQLGlCQUFNLGtCQUFJO0FBQUUxQixZQUFBQSxJQUFJLEVBQUUyQjtBQUFSLFdBQUosQ0FBTjs7QUF2Q087QUF5Q1BSLFVBQUFBLGFBQWE7O0FBekNOLGdCQTJDSE8sZUFBZSxDQUFDMUIsSUFBaEIsS0FBeUJ5QixzQkEzQ3RCO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBNkNMLGlCQUFNLG1CQUFLM0Isb0NBQUwsQ0FBTjs7QUE3Q0s7QUFBQTtBQUFBO0FBa0RQLGlCQUFNLGtCQUFJO0FBQUVFLFlBQUFBLElBQUksRUFBRTRCO0FBQVIsV0FBSixDQUFOOztBQWxETztBQW9EUFQsVUFBQUEsYUFBYTtBQXBETjs7QUFBQTtBQUFBO0FBQUE7QUF1RFQsaUJBQU0scUJBQU9GLDBCQUFQLENBQU47O0FBdkRTO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY2FsbCxcbiAgY2FuY2VsLFxuICBjYW5jZWxsZWQsXG4gIGZvcmssXG4gIHB1dCxcbiAgdGFrZSxcbn0gZnJvbSAncmVkdXgtc2FnYS9lZmZlY3RzJztcblxuaW1wb3J0IHsgZGVjb2RlIH0gZnJvbSAnanNvbndlYnRva2VuJztcbmltcG9ydCByYW5kb20gZnJvbSAnbWF0aC1yYW5kb20nO1xuXG5pbXBvcnQgdXBkYXRlQ29ubmVjdGlvblN0YXR1cywgeyBVUERBVEVfQ09OTkVDVElPTl9TVEFUVVMgfSBmcm9tICcuLi9hY3Rpb25zL3VwZGF0ZUNvbm5lY3Rpb25TdGF0dXMnO1xuXG5pbXBvcnQgY3JlYXRlUHJvbWlzZVF1ZXVlIGZyb20gJy4uL2NyZWF0ZVByb21pc2VRdWV1ZSc7XG5cbmltcG9ydCB7IENvbm5lY3Rpb25TdGF0dXMgfSBmcm9tICdib3RmcmFtZXdvcmstZGlyZWN0bGluZWpzJztcblxuaW1wb3J0IHtcbiAgQ09OTkVDVCxcbiAgQ09OTkVDVF9QRU5ESU5HLFxuICBDT05ORUNUX1JFSkVDVEVELFxuICBDT05ORUNUX0ZVTEZJTExJTkcsXG4gIENPTk5FQ1RfRlVMRklMTEVEXG59IGZyb20gJy4uL2FjdGlvbnMvY29ubmVjdCc7XG5cbmltcG9ydCB7XG4gIERJU0NPTk5FQ1QsXG4gIERJU0NPTk5FQ1RfUEVORElORyxcbiAgRElTQ09OTkVDVF9GVUxGSUxMRURcbn0gZnJvbSAnLi4vYWN0aW9ucy9kaXNjb25uZWN0JztcblxuY29uc3Qge1xuICBDb25uZWN0aW5nOiBDT05ORUNUSU5HLFxuICBPbmxpbmU6IE9OTElORSxcbiAgRXhwaXJlZFRva2VuOiBFWFBJUkVEX1RPS0VOLFxuICBGYWlsZWRUb0Nvbm5lY3Q6IEZBSUxFRF9UT19DT05ORUNULFxuICBFbmRlZDogRU5ERURcbn0gPSBDb25uZWN0aW9uU3RhdHVzO1xuXG5mdW5jdGlvbiByYW5kb21Vc2VySUQoKSB7XG4gIHJldHVybiBgcl8keyByYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDEwKSB9YDtcbn1cblxuZnVuY3Rpb24qIG9ic2VydmVBbmRQdXRDb25uZWN0aW9uU3RhdHVzVXBkYXRlKGRpcmVjdExpbmUpIHtcbiAgY29uc3QgY29ubmVjdGlvblN0YXR1c1F1ZXVlID0gY3JlYXRlUHJvbWlzZVF1ZXVlKCk7XG4gIGNvbnN0IGNvbm5lY3Rpb25TdGF0dXNTdWJzY3JpcHRpb24gPSBkaXJlY3RMaW5lLmNvbm5lY3Rpb25TdGF0dXMkLnN1YnNjcmliZSh7XG4gICAgbmV4dDogY29ubmVjdGlvblN0YXR1c1F1ZXVlLnB1c2hcbiAgfSk7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKDs7KSB7XG4gICAgICBjb25zdCBjb25uZWN0aW9uU3RhdHVzID0geWllbGQgY2FsbChjb25uZWN0aW9uU3RhdHVzUXVldWUuc2hpZnQpO1xuXG4gICAgICB5aWVsZCBwdXQodXBkYXRlQ29ubmVjdGlvblN0YXR1cyhjb25uZWN0aW9uU3RhdHVzKSk7XG4gICAgfVxuICB9IGZpbmFsbHkge1xuICAgIGNvbm5lY3Rpb25TdGF0dXNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBuZWdhdGl2ZVVwZGF0ZUNvbm5lY3Rpb25TdGF0dXNBY3Rpb24oeyBwYXlsb2FkLCB0eXBlIH0pIHtcbiAgaWYgKHR5cGUgPT09IFVQREFURV9DT05ORUNUSU9OX1NUQVRVUykge1xuICAgIGNvbnN0IHsgY29ubmVjdGlvblN0YXR1cyB9ID0gcGF5bG9hZDtcblxuICAgIHJldHVybiAoXG4gICAgICBjb25uZWN0aW9uU3RhdHVzICE9PSBDT05ORUNUSU5HXG4gICAgICAmJiBjb25uZWN0aW9uU3RhdHVzICE9PSBPTkxJTkVcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlY3RpZnlVc2VySUQoZGlyZWN0TGluZSwgdXNlcklERnJvbUFjdGlvbikge1xuICBjb25zdCB7IHRva2VuIH0gPSBkaXJlY3RMaW5lO1xuICBjb25zdCB7IHVzZXI6IHVzZXJJREZyb21Ub2tlbiB9ID0gZGVjb2RlKHRva2VuKSB8fCB7fTtcblxuICBpZiAodXNlcklERnJvbVRva2VuKSB7XG4gICAgaWYgKHVzZXJJREZyb21BY3Rpb24gJiYgdXNlcklERnJvbUFjdGlvbiAhPT0gdXNlcklERnJvbVRva2VuKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dlYiBDaGF0OiB1c2VyIElEIGlzIGJvdGggc3BlY2lmaWVkIGluIHRoZSBEaXJlY3QgTGluZSB0b2tlbiBhbmQgcGFzc2VkIGluLCB3aWxsIHVzZSB0aGUgdXNlciBJRCBmcm9tIHRoZSB0b2tlbi4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXNlcklERnJvbVRva2VuO1xuICB9IGVsc2UgaWYgKHVzZXJJREZyb21BY3Rpb24pIHtcbiAgICBpZiAodHlwZW9mIHVzZXJJREZyb21BY3Rpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dlYiBDaGF0OiB1c2VyIElEIG11c3QgYmUgYSBzdHJpbmcuJyk7XG5cbiAgICAgIHJldHVybiByYW5kb21Vc2VySUQoKTtcbiAgICB9IGVsc2UgaWYgKC9eZGxfLy50ZXN0KHVzZXJJREZyb21BY3Rpb24pKSB7XG4gICAgICBjb25zb2xlLndhcm4oJ1dlYiBDaGF0OiB1c2VyIElEIHByZWZpeGVkIHdpdGggXCJkbF9cIiBpcyByZXNlcnZlZCBhbmQgbXVzdCBiZSBlbWJlZGRlZCBpbnRvIHRoZSBEaXJlY3QgTGluZSB0b2tlbiB0byBwcmV2ZW50IGZvcmdlcnkuJyk7XG5cbiAgICAgIHJldHVybiByYW5kb21Vc2VySUQoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJhbmRvbVVzZXJJRCgpO1xuICB9XG5cbiAgcmV0dXJuIHVzZXJJREZyb21BY3Rpb247XG59XG5cbmZ1bmN0aW9uKiBjb25uZWN0U2FnYShkaXJlY3RMaW5lKSB7XG4gIC8vIERpcmVjdExpbmVKUyBzdGFydCB0aGUgY29ubmVjdGlvbiBvbmx5IGFmdGVyIHRoZSBmaXJzdCBzdWJzY3JpYmVyIGZvciBhY3Rpdml0eSQsIGJ1dCBub3QgY29ubmVjdGlvblN0YXR1cyRcbiAgY29uc3QgYWN0aXZpdHlTdWJzY3JpcHRpb24gPSBkaXJlY3RMaW5lLmFjdGl2aXR5JC5zdWJzY3JpYmUoeyBuZXh0OiAoKSA9PiAwIH0pO1xuXG4gIHRyeSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgY29uc3QgeyBwYXlsb2FkOiB7IGNvbm5lY3Rpb25TdGF0dXMgfSB9ID0geWllbGQgdGFrZShVUERBVEVfQ09OTkVDVElPTl9TVEFUVVMpO1xuXG4gICAgICAvLyBXZSB3aWxsIGlnbm9yZSBESVNDT05ORUNUIGFjdGlvbnMgdW50aWwgd2UgY29ubmVjdFxuXG4gICAgICBpZiAoY29ubmVjdGlvblN0YXR1cyA9PT0gT05MSU5FKSB7XG4gICAgICAgIC8vIFRPRE86IFtQMl0gRGlyZWN0TGluZUpTIHNob3VsZCBraWxsIHRoZSBjb25uZWN0aW9uIHdoZW4gd2UgdW5zdWJzY3JpYmVcbiAgICAgICAgLy8gICAgICAgQnV0IGN1cnJlbnRseSBpbiB2MywgRGlyZWN0TGluZUpTIGRvZXMgbm90IGhhdmUgdGhpcyBmdW5jdGlvbmFsaXR5XG4gICAgICAgIC8vICAgICAgIFRodXMsIHdlIG5lZWQgdG8gY2FsbCBcImVuZCgpXCIgZXhwbGljaXRseVxuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgYWN0aXZpdHlTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICBkaXJlY3RMaW5lLmVuZCgpO1xuICAgICAgICB9O1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgY29ubmVjdGlvblN0YXR1cyA9PT0gRU5ERURcbiAgICAgICAgfHwgY29ubmVjdGlvblN0YXR1cyA9PT0gRVhQSVJFRF9UT0tFTlxuICAgICAgICB8fCBjb25uZWN0aW9uU3RhdHVzID09PSBGQUlMRURfVE9fQ09OTkVDVFxuICAgICAgKSB7XG4gICAgICAgIC8vIElmIHdlIHJlY2VpdmUgYW55dGhpbmcgbmVnYXRpdmUsIHdlIHdpbGwgYXNzdW1lIHRoZSBjb25uZWN0aW9uIGlzIGVycm9yZWQgb3V0XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGNvbm5lY3QnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZmluYWxseSB7XG4gICAgaWYgKHlpZWxkIGNhbmNlbGxlZCgpKSB7XG4gICAgICBhY3Rpdml0eVN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NhbmNlbGxlZCcpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiogKCkge1xuICBmb3IgKDs7KSB7XG4gICAgY29uc3Qge1xuICAgICAgcGF5bG9hZDoge1xuICAgICAgICBkaXJlY3RMaW5lLFxuICAgICAgICB1c2VySUQ6IHVzZXJJREZyb21BY3Rpb24sXG4gICAgICAgIHVzZXJuYW1lXG4gICAgICB9XG4gICAgfSA9IHlpZWxkIHRha2UoQ09OTkVDVCk7XG4gICAgY29uc3QgdXBkYXRlQ29ubmVjdGlvblN0YXR1c1Rhc2sgPSB5aWVsZCBmb3JrKG9ic2VydmVBbmRQdXRDb25uZWN0aW9uU3RhdHVzVXBkYXRlLCBkaXJlY3RMaW5lKTtcblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBtZXRhID0ge1xuICAgICAgICB1c2VySUQ6IHJlY3RpZnlVc2VySUQoZGlyZWN0TGluZSwgdXNlcklERnJvbUFjdGlvbiksXG4gICAgICAgIHVzZXJuYW1lXG4gICAgICB9O1xuXG4gICAgICBsZXQgZW5kRGlyZWN0TGluZTtcblxuICAgICAgeWllbGQgcHV0KHsgdHlwZTogQ09OTkVDVF9QRU5ESU5HLCBtZXRhIH0pO1xuXG4gICAgICB0cnkge1xuICAgICAgICBlbmREaXJlY3RMaW5lID0geWllbGQgY2FsbChjb25uZWN0U2FnYSwgZGlyZWN0TGluZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgeWllbGQgcHV0KHsgdHlwZTogQ09OTkVDVF9SRUpFQ1RFRCwgZXJyb3I6IHRydWUsIG1ldGEsIHBheWxvYWQ6IGVyciB9KTtcblxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgLy8gQXQgdGhpcyBwb2ludCwgd2UgZXN0YWJsaXNoZWQgY29ubmVjdGlvbiB0byBEaXJlY3QgTGluZS5cbiAgICAgIC8vIEFueSBlcnJvcnMgZnJvbSB0aGlzIHBvaW50LCB3ZSBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSBjYWxsIGVuZERpcmVjdExpbmUoKSB0byByZWxlYXNlIHJlc291cmNlcy5cbiAgICAgIHRyeSB7XG4gICAgICAgIHlpZWxkIHB1dCh7IHR5cGU6IENPTk5FQ1RfRlVMRklMTElORywgbWV0YSwgcGF5bG9hZDogeyBkaXJlY3RMaW5lIH0gfSk7XG4gICAgICAgIHlpZWxkIHB1dCh7IHR5cGU6IENPTk5FQ1RfRlVMRklMTEVELCBtZXRhLCBwYXlsb2FkOiB7IGRpcmVjdExpbmUgfSB9KTtcblxuICAgICAgICBjb25zdCB0ZXJtaW5hdGVBY3Rpb24gPSB5aWVsZCB0YWtlKFtESVNDT05ORUNULCBuZWdhdGl2ZVVwZGF0ZUNvbm5lY3Rpb25TdGF0dXNBY3Rpb25dKTtcblxuICAgICAgICAvLyBFdmVuIGlmIHRoZSBjb25uZWN0aW9uIGlzIGludGVycnVwdGVkLCB3ZSB3aWxsIHN0aWxsIGVtaXR0aW5nIERJU0NPTk5FQ1RfUEVORElORy5cbiAgICAgICAgLy8gVGhpcyB3aWxsIG1ha2VzIGhhbmRsaW5nIGxvZ2ljIGVhc2llci4gSWYgQ09OTkVDVF9GVUxGSUxMRUQsIHdlIGd1YXJhbnRlZSBESVNDT05ORUNUX1BFTkRJTkcuXG4gICAgICAgIHlpZWxkIHB1dCh7IHR5cGU6IERJU0NPTk5FQ1RfUEVORElORyB9KTtcblxuICAgICAgICBlbmREaXJlY3RMaW5lKCk7XG5cbiAgICAgICAgaWYgKHRlcm1pbmF0ZUFjdGlvbi50eXBlID09PSBESVNDT05ORUNUKSB7XG4gICAgICAgICAgLy8gRm9yIGdyYWNlZnVsIGRpc2Nvbm5lY3QsIHdlIHdhaXQgdW50aWwgRGlyZWN0IExpbmUgc2F5IGl0IGlzIGVuZGVkXG4gICAgICAgICAgeWllbGQgdGFrZShuZWdhdGl2ZVVwZGF0ZUNvbm5lY3Rpb25TdGF0dXNBY3Rpb24pO1xuICAgICAgICB9XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICAvLyBJdCBpcyBtZWFuaW5nbGVzcyB0byBjb250aW51ZSB0byB1c2UgdGhlIERpcmVjdCBMaW5lIG9iamVjdCBldmVuIGRpc2Nvbm5lY3QgZmFpbGVkLlxuICAgICAgICAvLyBXZSB3aWxsIHN0aWxsIHVuc3Vic2NyaWJlIHRvIGluY29taW5nIGFjdGl2aXRpZXMgYW5kIGNvbnNpZGVyIERpcmVjdCBMaW5lIG9iamVjdCBhYmFuZG9uZWQuXG4gICAgICAgIHlpZWxkIHB1dCh7IHR5cGU6IERJU0NPTk5FQ1RfRlVMRklMTEVEIH0pO1xuXG4gICAgICAgIGVuZERpcmVjdExpbmUoKTtcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgeWllbGQgY2FuY2VsKHVwZGF0ZUNvbm5lY3Rpb25TdGF0dXNUYXNrKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==