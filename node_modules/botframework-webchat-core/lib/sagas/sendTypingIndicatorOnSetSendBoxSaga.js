"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _callee;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _effects = require("redux-saga/effects");

var _setSendBox = require("../actions/setSendBox");

var _setSendTyping = require("../actions/setSendTyping");

var _setSendTypingIndicator = require("../actions/setSendTypingIndicator");

var _postActivity = _interopRequireWildcard(require("../actions/postActivity"));

var _whileConnected = _interopRequireDefault(require("./effects/whileConnected"));

var _sendTypingIndicator = _interopRequireDefault(require("../selectors/sendTypingIndicator"));

var _sleep = _interopRequireDefault(require("../utils/sleep"));

var _marked =
/*#__PURE__*/
_regenerator.default.mark(_callee),
    _marked2 =
/*#__PURE__*/
_regenerator.default.mark(sendTypingIndicatorOnSetSendBox);

var SEND_INTERVAL = 3000;

function takeSendTypingIndicator(value) {
  return (0, _effects.take)(function (_ref) {
    var payload = _ref.payload,
        type = _ref.type;
    return type === _setSendTypingIndicator.SET_SEND_TYPING_INDICATOR && !payload.sendTypingIndicator === !value || // TODO: [P3] Take this deprecation code out when releasing on or after January 13 2020
    type === _setSendTyping.SET_SEND_TYPING && !payload.sendTyping === !value;
  });
}

function _callee() {
  return _regenerator.default.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return (0, _whileConnected.default)(sendTypingIndicatorOnSetSendBox);

        case 2:
        case "end":
          return _context.stop();
      }
    }
  }, _marked, this);
}

function sendTypingIndicatorOnSetSendBox() {
  var sendTypingIndicator, _loop;

  return _regenerator.default.wrap(function sendTypingIndicatorOnSetSendBox$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return (0, _effects.select)(_sendTypingIndicator.default);

        case 2:
          sendTypingIndicator = _context4.sent;

          if (sendTypingIndicator) {
            _context4.next = 6;
            break;
          }

          _context4.next = 6;
          return takeSendTypingIndicator(true);

        case 6:
          _loop =
          /*#__PURE__*/
          _regenerator.default.mark(function _loop() {
            var lastSend, task;
            return _regenerator.default.wrap(function _loop$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    lastSend = 0;
                    _context3.next = 3;
                    return (0, _effects.takeLatest)(function (_ref2) {
                      var payload = _ref2.payload,
                          type = _ref2.type;
                      return type === _setSendBox.SET_SEND_BOX && payload.text || // Stop sending pending typing indicator if the user has posted anything.
                      // We send typing indicator in a debounce way (t = 0, t = 3000, t = 6000).
                      // When the user type, and then post the activity at t = 1500, we still have a pending typing indicator at t = 3000.
                      // This code is to cancel the typing indicator at t = 3000.
                      type === _postActivity.POST_ACTIVITY && payload.activity.type !== 'typing';
                    },
                    /*#__PURE__*/
                    _regenerator.default.mark(function _callee2(_ref3) {
                      var type, interval;
                      return _regenerator.default.wrap(function _callee2$(_context2) {
                        while (1) {
                          switch (_context2.prev = _context2.next) {
                            case 0:
                              type = _ref3.type;

                              if (!(type === _setSendBox.SET_SEND_BOX)) {
                                _context2.next = 9;
                                break;
                              }

                              interval = SEND_INTERVAL - Date.now() + lastSend;

                              if (!(interval > 0)) {
                                _context2.next = 6;
                                break;
                              }

                              _context2.next = 6;
                              return (0, _effects.call)(_sleep.default, interval);

                            case 6:
                              _context2.next = 8;
                              return (0, _effects.put)((0, _postActivity.default)({
                                type: 'typing'
                              }));

                            case 8:
                              lastSend = Date.now();

                            case 9:
                            case "end":
                              return _context2.stop();
                          }
                        }
                      }, _callee2, this);
                    }));

                  case 3:
                    task = _context3.sent;
                    _context3.next = 6;
                    return takeSendTypingIndicator(false);

                  case 6:
                    _context3.next = 8;
                    return (0, _effects.cancel)(task);

                  case 8:
                    _context3.next = 10;
                    return takeSendTypingIndicator(true);

                  case 10:
                  case "end":
                    return _context3.stop();
                }
              }
            }, _loop, this);
          });

        case 7:
          return _context4.delegateYield(_loop(), "t0", 8);

        case 8:
          _context4.next = 7;
          break;

        case 10:
        case "end":
          return _context4.stop();
      }
    }
  }, _marked2, this);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zYWdhcy9zZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94U2FnYS5qcyJdLCJuYW1lcyI6WyJzZW5kVHlwaW5nSW5kaWNhdG9yT25TZXRTZW5kQm94IiwiU0VORF9JTlRFUlZBTCIsInRha2VTZW5kVHlwaW5nSW5kaWNhdG9yIiwidmFsdWUiLCJwYXlsb2FkIiwidHlwZSIsIlNFVF9TRU5EX1RZUElOR19JTkRJQ0FUT1IiLCJzZW5kVHlwaW5nSW5kaWNhdG9yIiwiU0VUX1NFTkRfVFlQSU5HIiwic2VuZFR5cGluZyIsInNlbmRUeXBpbmdJbmRpY2F0b3JTZWxlY3RvciIsImxhc3RTZW5kIiwiU0VUX1NFTkRfQk9YIiwidGV4dCIsIlBPU1RfQUNUSVZJVFkiLCJhY3Rpdml0eSIsImludGVydmFsIiwiRGF0ZSIsIm5vdyIsInNsZWVwIiwidGFzayJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUFBOztBQVNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUVBOztBQUVBOzs7Ozs7OzBCQW1CVUEsK0I7O0FBakJWLElBQU1DLGFBQWEsR0FBRyxJQUF0Qjs7QUFFQSxTQUFTQyx1QkFBVCxDQUFpQ0MsS0FBakMsRUFBd0M7QUFDdEMsU0FBTyxtQkFDTDtBQUFBLFFBQUdDLE9BQUgsUUFBR0EsT0FBSDtBQUFBLFFBQVlDLElBQVosUUFBWUEsSUFBWjtBQUFBLFdBQ0dBLElBQUksS0FBS0MsaURBQVQsSUFBc0MsQ0FBQ0YsT0FBTyxDQUFDRyxtQkFBVCxLQUFpQyxDQUFDSixLQUF6RSxJQUVBO0FBQ0lFLElBQUFBLElBQUksS0FBS0csOEJBQVQsSUFBNEIsQ0FBQ0osT0FBTyxDQUFDSyxVQUFULEtBQXdCLENBQUNOLEtBSjNEO0FBQUEsR0FESyxDQUFQO0FBUUQ7O0FBRWM7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ2IsaUJBQU0sNkJBQWVILCtCQUFmLENBQU47O0FBRGE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBSWYsU0FBVUEsK0JBQVY7QUFBQTs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQzhCLGlCQUFNLHFCQUFPVSw0QkFBUCxDQUFOOztBQUQ5QjtBQUNRSCxVQUFBQSxtQkFEUjs7QUFBQSxjQUdPQSxtQkFIUDtBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUlJLGlCQUFNTCx1QkFBdUIsQ0FBQyxJQUFELENBQTdCOztBQUpKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQVFRUyxvQkFBQUEsUUFSUixHQVFtQixDQVJuQjtBQUFBO0FBU2lCLDJCQUFNLHlCQUNqQjtBQUFBLDBCQUFHUCxPQUFILFNBQUdBLE9BQUg7QUFBQSwwQkFBWUMsSUFBWixTQUFZQSxJQUFaO0FBQUEsNkJBQ0dBLElBQUksS0FBS08sd0JBQVQsSUFBeUJSLE9BQU8sQ0FBQ1MsSUFBbEMsSUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNJUixzQkFBQUEsSUFBSSxLQUFLUywyQkFBVCxJQUEwQlYsT0FBTyxDQUFDVyxRQUFSLENBQWlCVixJQUFqQixLQUEwQixRQVAxRDtBQUFBLHFCQURpQjtBQUFBO0FBQUEsOENBVWpCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFhQSw4QkFBQUEsSUFBYixTQUFhQSxJQUFiOztBQUFBLG9DQUNNQSxJQUFJLEtBQUtPLHdCQURmO0FBQUE7QUFBQTtBQUFBOztBQUVVSSw4QkFBQUEsUUFGVixHQUVxQmYsYUFBYSxHQUFHZ0IsSUFBSSxDQUFDQyxHQUFMLEVBQWhCLEdBQTZCUCxRQUZsRDs7QUFBQSxvQ0FJUUssUUFBUSxHQUFHLENBSm5CO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBS00scUNBQU0sbUJBQUtHLGNBQUwsRUFBWUgsUUFBWixDQUFOOztBQUxOO0FBQUE7QUFRSSxxQ0FBTSxrQkFBSSwyQkFBYTtBQUFFWCxnQ0FBQUEsSUFBSSxFQUFFO0FBQVIsK0JBQWIsQ0FBSixDQUFOOztBQVJKO0FBVUlNLDhCQUFBQSxRQUFRLEdBQUdNLElBQUksQ0FBQ0MsR0FBTCxFQUFYOztBQVZKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHFCQVZpQixFQUFOOztBQVRqQjtBQVNVRSxvQkFBQUEsSUFUVjtBQUFBO0FBa0NJLDJCQUFNbEIsdUJBQXVCLENBQUMsS0FBRCxDQUE3Qjs7QUFsQ0o7QUFBQTtBQW1DSSwyQkFBTSxxQkFBT2tCLElBQVAsQ0FBTjs7QUFuQ0o7QUFBQTtBQW9DSSwyQkFBTWxCLHVCQUF1QixDQUFDLElBQUQsQ0FBN0I7O0FBcENKO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgY2FsbCxcbiAgY2FuY2VsLFxuICBwdXQsXG4gIHNlbGVjdCxcbiAgdGFrZSxcbiAgdGFrZUxhdGVzdFxufSBmcm9tICdyZWR1eC1zYWdhL2VmZmVjdHMnO1xuXG5pbXBvcnQgeyBTRVRfU0VORF9CT1ggfSBmcm9tICcuLi9hY3Rpb25zL3NldFNlbmRCb3gnO1xuaW1wb3J0IHsgU0VUX1NFTkRfVFlQSU5HIH0gZnJvbSAnLi4vYWN0aW9ucy9zZXRTZW5kVHlwaW5nJztcbmltcG9ydCB7IFNFVF9TRU5EX1RZUElOR19JTkRJQ0FUT1IgfSBmcm9tICcuLi9hY3Rpb25zL3NldFNlbmRUeXBpbmdJbmRpY2F0b3InO1xuaW1wb3J0IHBvc3RBY3Rpdml0eSwgeyBQT1NUX0FDVElWSVRZIH0gZnJvbSAnLi4vYWN0aW9ucy9wb3N0QWN0aXZpdHknO1xuXG5pbXBvcnQgd2hpbGVDb25uZWN0ZWQgZnJvbSAnLi9lZmZlY3RzL3doaWxlQ29ubmVjdGVkJztcblxuaW1wb3J0IHNlbmRUeXBpbmdJbmRpY2F0b3JTZWxlY3RvciBmcm9tICcuLi9zZWxlY3RvcnMvc2VuZFR5cGluZ0luZGljYXRvcic7XG5cbmltcG9ydCBzbGVlcCBmcm9tICcuLi91dGlscy9zbGVlcCc7XG5cbmNvbnN0IFNFTkRfSU5URVJWQUwgPSAzMDAwO1xuXG5mdW5jdGlvbiB0YWtlU2VuZFR5cGluZ0luZGljYXRvcih2YWx1ZSkge1xuICByZXR1cm4gdGFrZShcbiAgICAoeyBwYXlsb2FkLCB0eXBlIH0pID0+IChcbiAgICAgICh0eXBlID09PSBTRVRfU0VORF9UWVBJTkdfSU5ESUNBVE9SICYmICFwYXlsb2FkLnNlbmRUeXBpbmdJbmRpY2F0b3IgPT09ICF2YWx1ZSlcblxuICAgICAgLy8gVE9ETzogW1AzXSBUYWtlIHRoaXMgZGVwcmVjYXRpb24gY29kZSBvdXQgd2hlbiByZWxlYXNpbmcgb24gb3IgYWZ0ZXIgSmFudWFyeSAxMyAyMDIwXG4gICAgICB8fCAodHlwZSA9PT0gU0VUX1NFTkRfVFlQSU5HICYmICFwYXlsb2FkLnNlbmRUeXBpbmcgPT09ICF2YWx1ZSlcbiAgICApXG4gICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKiAoKSB7XG4gIHlpZWxkIHdoaWxlQ29ubmVjdGVkKHNlbmRUeXBpbmdJbmRpY2F0b3JPblNldFNlbmRCb3gpO1xufVxuXG5mdW5jdGlvbiogc2VuZFR5cGluZ0luZGljYXRvck9uU2V0U2VuZEJveCgpIHtcbiAgY29uc3Qgc2VuZFR5cGluZ0luZGljYXRvciA9IHlpZWxkIHNlbGVjdChzZW5kVHlwaW5nSW5kaWNhdG9yU2VsZWN0b3IpO1xuXG4gIGlmICghc2VuZFR5cGluZ0luZGljYXRvcikge1xuICAgIHlpZWxkIHRha2VTZW5kVHlwaW5nSW5kaWNhdG9yKHRydWUpO1xuICB9XG5cbiAgZm9yICg7Oykge1xuICAgIGxldCBsYXN0U2VuZCA9IDA7XG4gICAgY29uc3QgdGFzayA9IHlpZWxkIHRha2VMYXRlc3QoXG4gICAgICAoeyBwYXlsb2FkLCB0eXBlIH0pID0+IChcbiAgICAgICAgKHR5cGUgPT09IFNFVF9TRU5EX0JPWCAmJiBwYXlsb2FkLnRleHQpXG5cbiAgICAgICAgLy8gU3RvcCBzZW5kaW5nIHBlbmRpbmcgdHlwaW5nIGluZGljYXRvciBpZiB0aGUgdXNlciBoYXMgcG9zdGVkIGFueXRoaW5nLlxuICAgICAgICAvLyBXZSBzZW5kIHR5cGluZyBpbmRpY2F0b3IgaW4gYSBkZWJvdW5jZSB3YXkgKHQgPSAwLCB0ID0gMzAwMCwgdCA9IDYwMDApLlxuICAgICAgICAvLyBXaGVuIHRoZSB1c2VyIHR5cGUsIGFuZCB0aGVuIHBvc3QgdGhlIGFjdGl2aXR5IGF0IHQgPSAxNTAwLCB3ZSBzdGlsbCBoYXZlIGEgcGVuZGluZyB0eXBpbmcgaW5kaWNhdG9yIGF0IHQgPSAzMDAwLlxuICAgICAgICAvLyBUaGlzIGNvZGUgaXMgdG8gY2FuY2VsIHRoZSB0eXBpbmcgaW5kaWNhdG9yIGF0IHQgPSAzMDAwLlxuICAgICAgICB8fCAodHlwZSA9PT0gUE9TVF9BQ1RJVklUWSAmJiBwYXlsb2FkLmFjdGl2aXR5LnR5cGUgIT09ICd0eXBpbmcnKVxuICAgICAgKSxcbiAgICAgIGZ1bmN0aW9uKiAoeyB0eXBlIH0pIHtcbiAgICAgICAgaWYgKHR5cGUgPT09IFNFVF9TRU5EX0JPWCkge1xuICAgICAgICAgIGNvbnN0IGludGVydmFsID0gU0VORF9JTlRFUlZBTCAtIERhdGUubm93KCkgKyBsYXN0U2VuZDtcblxuICAgICAgICAgIGlmIChpbnRlcnZhbCA+IDApIHtcbiAgICAgICAgICAgIHlpZWxkIGNhbGwoc2xlZXAsIGludGVydmFsKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB5aWVsZCBwdXQocG9zdEFjdGl2aXR5KHsgdHlwZTogJ3R5cGluZycgfSkpO1xuXG4gICAgICAgICAgbGFzdFNlbmQgPSBEYXRlLm5vdygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKTtcblxuICAgIHlpZWxkIHRha2VTZW5kVHlwaW5nSW5kaWNhdG9yKGZhbHNlKTtcbiAgICB5aWVsZCBjYW5jZWwodGFzayk7XG4gICAgeWllbGQgdGFrZVNlbmRUeXBpbmdJbmRpY2F0b3IodHJ1ZSk7XG4gIH1cbn1cbiJdfQ==