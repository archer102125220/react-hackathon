"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _glamor = require("glamor");

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var DOT_BOX_SIZE = 20;
var DOT_SIZE = 6;

var createDotsBoxCSS = function createDotsBoxCSS(_ref) {
  var height = _ref.height;
  return (0, _glamor.css)({
    alignItems: 'center',
    bottom: 0,
    height: height,
    justifyContent: 'center',
    width: '100%'
  });
};

var createDotsItemCSS = function createDotsItemCSS(_ref2) {
  var boxSize = _ref2.boxSize,
      size = _ref2.size;
  return (0, _glamor.css)({
    alignItems: 'center',
    display: 'flex',
    height: boxSize,
    justifyContent: 'center',
    width: boxSize,
    '& > input': {
      cursor: 'pointer',
      height: '100%',
      left: 0,
      margin: 0,
      opacity: 0,
      position: 'absolute',
      top: 0,
      width: '100%'
    },
    '& > div': {
      background: 'rgba(0, 0, 0, .2)',
      borderRadius: size / 2,
      height: size,
      width: size
    },
    '&:hover > div, & > input:focus + div': {
      background: 'rgba(0, 0, 0, .4)'
    },
    '& > input:active + div': {
      background: 'rgba(0, 0, 0, .8)'
    },
    '& > input:checked:not(:active) + div': {
      background: 'rgba(0, 0, 0, .6)'
    }
  });
};

var FLIPPER_BOX_WIDTH = 60;
var FLIPPER_SIZE = 40;

var createFlipperBoxCSS = function createFlipperBoxCSS(_ref3) {
  var boxWidth = _ref3.boxWidth,
      size = _ref3.size;
  return (0, _glamor.css)({
    background: 'Transparent',
    cursor: 'pointer',
    height: '100%',
    position: 'absolute',
    top: 0,
    width: boxWidth,
    '& > div.slider': {
      alignItems: 'center',
      display: 'flex',
      height: '100%',
      justifyContent: 'center',
      position: 'absolute',
      top: 0,
      width: '100%',
      '& > div': {
        backgroundColor: 'rgba(0, 0, 0, .6)',
        borderRadius: '50%',
        color: 'rgba(255, 255, 255, .6)',
        fontFamily: ['Consolas', 'monospace'].map(function (font) {
          return "'".concat(font, "'");
        }).join(', '),
        fontSize: 16,
        height: size,
        lineHeight: "".concat(size, "px"),
        transitionProperty: 'background-color',
        transitionDuration: '100ms',
        width: size
      }
    },
    '&:hover, &:focus': {
      '& > div.slider > div': {
        backgroundColor: 'rgba(0, 0, 0, .8)',
        color: 'rgba(255, 255, 255, .8)',
        transitionDuration: 0
      }
    },
    '&:active > div.slider > div': {
      backgroundColor: 'Black',
      color: 'White',
      transitionDuration: 0
    }
  });
};

var createLeftFlipperCSS = function createLeftFlipperCSS(options) {
  return (0, _glamor.css)({
    left: 0,
    '& > div.slider': {
      left: 0
    }
  }, createFlipperBoxCSS(options));
};

var createRightFlipperCSS = function createRightFlipperCSS(options) {
  return (0, _glamor.css)({
    right: 0,
    '& > div.slider': {
      right: 0
    }
  }, createFlipperBoxCSS(options));
};

var SCROLL_BAR_HEIGHT = 8;
var SCROLL_BAR_MARGIN = 4;

var createScrollBarBoxCSS = function createScrollBarBoxCSS(_ref4) {
  var height = _ref4.height,
      margin = _ref4.margin;
  return (0, _glamor.css)({
    bottom: 0,
    padding: margin,
    position: 'absolute',
    transitionDelay: '1s',
    transitionDuration: '300ms',
    transitionProperty: 'bottom',
    width: '100%'
  });
};

var createScrollBarHandlerCSS = function createScrollBarHandlerCSS(_ref5) {
  var height = _ref5.height,
      margin = _ref5.margin;
  return (0, _glamor.css)({
    backdropFilter: 'blur(4px)',
    background: 'rgba(255, 255, 255, .4)',
    borderRadius: height / 2,
    height: height
  });
};

function _default() {
  var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref6$autoHide = _ref6.autoHide,
      autoHide = _ref6$autoHide === void 0 ? true : _ref6$autoHide,
      _ref6$dotBoxSize = _ref6.dotBoxSize,
      dotBoxSize = _ref6$dotBoxSize === void 0 ? DOT_BOX_SIZE : _ref6$dotBoxSize,
      _ref6$dotSize = _ref6.dotSize,
      dotSize = _ref6$dotSize === void 0 ? DOT_SIZE : _ref6$dotSize,
      _ref6$flipperBoxWidth = _ref6.flipperBoxWidth,
      flipperBoxWidth = _ref6$flipperBoxWidth === void 0 ? FLIPPER_BOX_WIDTH : _ref6$flipperBoxWidth,
      _ref6$flipperSize = _ref6.flipperSize,
      flipperSize = _ref6$flipperSize === void 0 ? FLIPPER_SIZE : _ref6$flipperSize,
      _ref6$scrollBarHeight = _ref6.scrollBarHeight,
      scrollBarHeight = _ref6$scrollBarHeight === void 0 ? SCROLL_BAR_HEIGHT : _ref6$scrollBarHeight,
      _ref6$scrollBarMargin = _ref6.scrollBarMargin,
      scrollBarMargin = _ref6$scrollBarMargin === void 0 ? SCROLL_BAR_MARGIN : _ref6$scrollBarMargin;

  var styles = {
    carousel: '',
    dotsBox: createDotsBoxCSS({
      height: dotBoxSize
    }),
    dotsItem: createDotsItemCSS({
      boxSize: dotBoxSize,
      size: dotSize
    }),
    leftFlipper: createLeftFlipperCSS({
      boxWidth: flipperBoxWidth,
      size: flipperSize
    }),
    rightFlipper: createRightFlipperCSS({
      boxWidth: flipperBoxWidth,
      size: flipperSize
    }),
    scrollBarBox: createScrollBarBoxCSS({
      height: scrollBarHeight,
      margin: scrollBarMargin
    }),
    scrollBarHandler: createScrollBarHandlerCSS({
      height: scrollBarHeight,
      margin: scrollBarMargin
    })
  }; // This is for overriding existing rules with auto-hide CSS transitions

  if (autoHide) {
    var _hoverScrolling;

    var flipperOverrides = {
      position: 'absolute',
      top: 0,
      transitionDelay: '1s',
      transitionDuration: '300ms'
    };
    styles.leftFlipper = (0, _glamor.css)(styles.leftFlipper, {
      '& > div.slider': _objectSpread({}, flipperOverrides, {
        left: -50,
        transitionProperty: 'left'
      }),
      '&:focus > div.slider': {
        left: 0,
        transitionDelay: '0s'
      }
    });
    styles.rightFlipper = (0, _glamor.css)(styles.rightFlipper, {
      '& > div.slider': _objectSpread({}, flipperOverrides, {
        right: -50,
        transitionProperty: 'right'
      }),
      '&:focus > div.slider': {
        right: 0,
        transitionDelay: '0s'
      }
    });
    styles.scrollBarBox = (0, _glamor.css)(styles.scrollBarBox, {
      bottom: -30,
      transitionDelay: '1s',
      transitionDuration: '300ms',
      transitionProperty: 'bottom'
    }); // The auto-hide state is defined in arch-style (carousel) for its `hover` pseudo class

    styles.carousel = (0, _glamor.css)({
      '&:hover, &.scrolling': (_hoverScrolling = {}, _defineProperty(_hoverScrolling, "& .".concat(styles.scrollBarBox + '', ", & .").concat(styles.leftFlipper + '', " > div.slider, & .").concat(styles.rightFlipper + '', " > div.slider"), {
        // Controls show up as soon as the user hover on it
        transitionDelay: '0s'
      }), _defineProperty(_hoverScrolling, "& .".concat(styles.scrollBarBox + ''), {
        bottom: 0
      }), _defineProperty(_hoverScrolling, "& .".concat(styles.leftFlipper + '', " > div.slider"), {
        left: 0
      }), _defineProperty(_hoverScrolling, "& .".concat(styles.rightFlipper + '', " > div.slider"), {
        right: 0
      }), _hoverScrolling)
    });
  }

  return styles;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,