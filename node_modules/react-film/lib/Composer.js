"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _best = _interopRequireDefault(require("./best"));

var _Context = _interopRequireDefault(require("./Context"));

var _ScrollSpy = _interopRequireDefault(require("./ScrollSpy"));

var _ScrollTo = _interopRequireDefault(require("./ScrollTo"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function getView(current, scrollingTo) {
  if (current) {
    var scrollLeft = scrollingTo || current.scrollLeft;
    var items = current.querySelectorAll('ul > li');
    var scrollCenter = scrollLeft + current.offsetWidth / 2;
    var index = (0, _best.default)([].slice.call(items), function (item) {
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      return 1 / Math.abs(scrollCenter - offsetCenter);
    });

    if (~index) {
      var item = items[index];
      var offsetCenter = item.offsetLeft + item.offsetWidth / 2;
      var indexFraction = index + (scrollCenter - offsetCenter) / item.offsetWidth; // We "fix" indexFraction if the viewport is at the start/end of the content
      // This is to simplify code that use Math.round(indexFraction) to find the current index
      // if (scrollLeft === 0) {
      //   indexFraction = 0;
      // } else if (scrollLeft >= current.scrollWidth - current.offsetWidth) {
      //   indexFraction = items.length - 1;
      // } else if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {
      //   indexFraction = Math.round(indexFraction);
      // }

      if (indexFraction % 1 > .99 || indexFraction % 1 < .01) {
        indexFraction = Math.round(indexFraction);
      }

      var selectedIndex;

      if (scrollLeft === 0) {
        selectedIndex = 0;
      } else if (scrollLeft >= current.scrollWidth - current.offsetWidth) {
        selectedIndex = items.length - 1;
      } else {
        selectedIndex = Math.round(indexFraction);
      }

      return {
        index: selectedIndex,
        indexFraction: indexFraction,
        items: items,
        current: current
      };
    }
  }
}

function getScrollLeft(current, index) {
  if (current) {
    var items = current.querySelectorAll('ul > li');
    var item = items[Math.max(0, Math.min(items.length - 1, index))];

    if (item) {
      var itemOffsetCenter = item.offsetLeft + item.offsetWidth / 2;
      return itemOffsetCenter - current.offsetWidth / 2;
    }
  }
}

var FilmComposer =
/*#__PURE__*/
function (_React$Component) {
  _inherits(FilmComposer, _React$Component);

  function FilmComposer(props) {
    var _this;

    _classCallCheck(this, FilmComposer);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(FilmComposer).call(this, props));
    _this.handleScroll = _this.handleScroll.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.handleScrollToEnd = _this.handleScrollToEnd.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.state = {
      filmStrip: null,
      scrollLeft: null,
      context: {
        _setFilmStripRef: function _setFilmStripRef(filmStrip) {
          return _this.setState(function () {
            return {
              filmStrip: filmStrip
            };
          });
        },
        _setNumItems: function _setNumItems(numItems) {
          _this.setState(function (_ref) {
            var context = _ref.context;
            return {
              context: _objectSpread({}, context, {
                numItems: numItems
              })
            };
          });
        },
        numItems: 0,
        scrollBarPercentage: '0%',
        scrollBarWidth: '0%',
        scrolling: false,
        scrollTo: function scrollTo(_scrollTo) {
          _this.setState(function (state) {
            var view = getView(state.filmStrip, state.scrollLeft);

            if (view) {
              var index = view.index,
                  indexFraction = view.indexFraction;

              var targetIndex = _scrollTo({
                index: index,
                indexFraction: indexFraction
              });

              if (typeof targetIndex === 'number') {
                return {
                  scrollLeft: getScrollLeft(state.filmStrip, targetIndex)
                };
              }
            }
          });
        },
        scrollOneLeft: function scrollOneLeft() {
          _this.state.context.scrollTo(function (_ref2) {
            var indexFraction = _ref2.indexFraction;
            return Math.ceil(indexFraction) - 1;
          });
        },
        scrollOneRight: function scrollOneRight() {
          _this.state.context.scrollTo(function (_ref3) {
            var indexFraction = _ref3.indexFraction;
            return Math.floor(indexFraction) + 1;
          });
        }
      }
    };
    return _this;
  }

  _createClass(FilmComposer, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      clearTimeout(this.scrollTimeout);
    }
  }, {
    key: "handleScroll",
    value: function handleScroll(_ref4) {
      var _this2 = this;

      var scrollBarPercentage = _ref4.fraction,
          initial = _ref4.initial,
          scrollBarWidth = _ref4.width;
      this.setState(function (_ref5) {
        var context = _ref5.context,
            filmStrip = _ref5.filmStrip,
            scrollLeft = _ref5.scrollLeft;
        var view = getView(filmStrip, scrollLeft);

        if (view) {
          var index = view.index,
              indexFraction = view.indexFraction;
          return {
            context: _objectSpread({}, context, {
              index: index,
              indexFraction: indexFraction,
              scrolling: !initial,
              scrollBarPercentage: scrollBarPercentage,
              scrollBarWidth: scrollBarWidth
            })
          };
        }
      });

      if (!initial) {
        clearTimeout(this.scrollTimeout);
        this.scrollTimeout = setTimeout(function () {
          _this2.setState(function (_ref6) {
            var context = _ref6.context;
            return {
              context: _objectSpread({}, context, {
                scrolling: false
              })
            };
          });
        }, 500);
      }
    }
  }, {
    key: "handleScrollToEnd",
    value: function handleScrollToEnd() {
      this.setState(function () {
        return {
          scrollLeft: null
        };
      });
    }
  }, {
    key: "render",
    value: function render() {
      var state = this.state;
      return _react.default.createElement(_Context.default.Provider, {
        value: state.context
      }, this.props.children, !!state.filmStrip && _react.default.createElement(_ScrollSpy.default, {
        onScroll: this.handleScroll,
        target: state.filmStrip
      }), typeof state.scrollLeft === 'number' && !!state.filmStrip && _react.default.createElement(_ScrollTo.default, {
        onEnd: this.handleScrollToEnd,
        scrollLeft: state.scrollLeft,
        target: state.filmStrip
      }));
    }
  }]);

  return FilmComposer;
}(_react.default.Component);

exports.default = FilmComposer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,