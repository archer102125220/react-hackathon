"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function step(from, to, stepper, index) {
  var next = from;

  for (var i = 0; i < index; i++) {
    next = stepper(next, to);
  }

  return next;
}

function squareStepper(current, to) {
  var sign = Math.sign(to - current);
  var step = Math.sqrt(Math.abs(to - current));
  var next = current + step * sign;

  if (sign > 0) {
    return Math.min(to, next);
  } else {
    return Math.max(to, next);
  }
}

var ScrollTo =
/*#__PURE__*/
function (_React$Component) {
  _inherits(ScrollTo, _React$Component);

  function ScrollTo(props, context) {
    var _this;

    _classCallCheck(this, ScrollTo);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(ScrollTo).call(this, props, context));
    _this.handleCancelAnimation = _this.handleCancelAnimation.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(ScrollTo, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var target = this.props.target;

      if (target) {
        this.addEventListeners(target);
        this.animate('scrollLeft', target.scrollLeft, this.props.scrollLeft, 1);
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      var scrollChanged = prevProps.scrollLeft !== this.props.scrollLeft;
      var targetChanged = prevProps.target !== this.props.target;

      if (targetChanged) {
        this.removeEventListeners(prevProps.target);
        this.addEventListeners(this.props.target);
      }

      if ((scrollChanged || targetChanged) && this.props.target) {
        this.animate('scrollLeft', this.props.target.scrollLeft, this.props.scrollLeft, 1);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.removeEventListeners(this.props.target);
      cancelAnimationFrame(this.animator);
    }
  }, {
    key: "addEventListeners",
    value: function addEventListeners(target) {
      target && target.addEventListener('pointerdown', this.handleCancelAnimation, {
        passive: true
      });
    }
  }, {
    key: "removeEventListeners",
    value: function removeEventListeners(target) {
      target && target.removeEventListener('pointerdown', this.handleCancelAnimation);
    }
  }, {
    key: "animate",
    value: function animate(name, from, to, index) {
      var _this2 = this;

      var start = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Date.now();

      if (typeof to === 'number') {
        cancelAnimationFrame(this.animator);
        this.animator = requestAnimationFrame(function () {
          var target = _this2.props.target;

          if (target) {
            var nextValue = step(from, to, squareStepper, (Date.now() - start) / 5);

            if (Math.abs(to - nextValue) < .5) {
              nextValue = to;
            }

            target[name] = nextValue;

            if (to === nextValue) {
              _this2.props.onEnd && _this2.props.onEnd(true);
            } else {
              _this2.animate(name, from, to, index + 1, start);
            }
          }
        });
      }
    }
  }, {
    key: "handleCancelAnimation",
    value: function handleCancelAnimation() {
      cancelAnimationFrame(this.animator);
      this.props.onEnd && this.props.onEnd(false);
    }
  }, {
    key: "render",
    value: function render() {
      return false;
    }
  }]);

  return ScrollTo;
}(_react.default.Component);

exports.default = ScrollTo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,