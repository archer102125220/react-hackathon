"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function botSaidSomething(avatarInitials, text, timestamp) {
  return "Bot ".concat(avatarInitials, " said, ").concat(text, ", ").concat(xMinutesAgo(timestamp));
}

function userSaidSomething(avatarInitials, text, timestamp) {
  return "User ".concat(avatarInitials, " said, ").concat(text, ", ").concat(xMinutesAgo(timestamp));
}

function xMinutesAgo(dateStr) {
  var date = new Date(dateStr);
  var dateTime = date.getTime();

  if (isNaN(dateTime)) {
    return dateStr;
  }

  var now = Date.now();
  var deltaInMs = now - dateTime;
  var deltaInMinutes = Math.floor(deltaInMs / 60000);
  var deltaInHours = Math.floor(deltaInMs / 3600000);

  if (deltaInMinutes < 1) {
    return 'Just now';
  } else if (deltaInMinutes === 1) {
    return 'A minute ago';
  } else if (deltaInHours < 1) {
    return "".concat(deltaInMinutes, " minutes ago");
  } else if (deltaInHours === 1) {
    return "An hour ago";
  } else if (deltaInHours < 5) {
    return "".concat(deltaInHours, " hours ago");
  } else if (deltaInHours <= 24) {
    return "Today";
  } else if (deltaInHours <= 48) {
    return "Yesterday";
  } else if (window.Intl) {
    return new Intl.DateTimeFormat('en-US').format(date);
  } else {
    return date.toLocaleString('en-US', {
      day: '2-digit',
      hour: '2-digit',
      hour12: false,
      minute: '2-digit',
      month: '2-digit',
      year: 'numeric'
    });
  }
}

var _default = {
  FAILED_CONNECTION_NOTIFICATION: 'Unable to connect.',
  // Do not localize {Retry}; it is a placeholder for "Retry". English translation should be, "Send failed. Retry."
  SEND_FAILED_KEY: 'Send failed. {Retry}.',
  SLOW_CONNECTION_NOTIFICATION: 'Taking longer than usual to connect.',
  'Bot said something': botSaidSomething,
  'User said something': userSaidSomething,
  'X minutes ago': xMinutesAgo,
  // '[File of type '%1']': '[File of type '%1']",
  // '[Unknown Card '%1']': '[Unknown Card '%1']',
  'Adaptive Card parse error': 'Adaptive Card parse error',
  'Adaptive Card render error': 'Adaptive Card render error',
  'Chat': 'Chat',
  'Download file': 'Download file',
  'Microphone off': 'Microphone off',
  'Microphone on': 'Microphone on',
  'Left': 'Left',
  'Listening…': 'Listening…',
  'New messages': 'New messages',
  'Right': 'Right',
  'retry': 'retry',
  'Retry': 'Retry',
  'Send': 'Send',
  'Sending': 'Sending',
  'Speak': 'Speak',
  'Starting…': 'Starting…',
  'Tax': 'Tax',
  'Total': 'Total',
  'Type your message': 'Type your message',
  'Upload file': 'Upload file',
  'VAT': 'VAT'
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9Mb2NhbGl6YXRpb24vZW4tVVMuanMiXSwibmFtZXMiOlsiYm90U2FpZFNvbWV0aGluZyIsImF2YXRhckluaXRpYWxzIiwidGV4dCIsInRpbWVzdGFtcCIsInhNaW51dGVzQWdvIiwidXNlclNhaWRTb21ldGhpbmciLCJkYXRlU3RyIiwiZGF0ZSIsIkRhdGUiLCJkYXRlVGltZSIsImdldFRpbWUiLCJpc05hTiIsIm5vdyIsImRlbHRhSW5NcyIsImRlbHRhSW5NaW51dGVzIiwiTWF0aCIsImZsb29yIiwiZGVsdGFJbkhvdXJzIiwid2luZG93IiwiSW50bCIsIkRhdGVUaW1lRm9ybWF0IiwiZm9ybWF0IiwidG9Mb2NhbGVTdHJpbmciLCJkYXkiLCJob3VyIiwiaG91cjEyIiwibWludXRlIiwibW9udGgiLCJ5ZWFyIiwiRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OIiwiU0VORF9GQUlMRURfS0VZIiwiU0xPV19DT05ORUNUSU9OX05PVElGSUNBVElPTiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLFNBQVNBLGdCQUFULENBQTBCQyxjQUExQixFQUEwQ0MsSUFBMUMsRUFBZ0RDLFNBQWhELEVBQTJEO0FBQ3pELHVCQUFlRixjQUFmLG9CQUF5Q0MsSUFBekMsZUFBb0RFLFdBQVcsQ0FBQ0QsU0FBRCxDQUEvRDtBQUNEOztBQUVELFNBQVNFLGlCQUFULENBQTJCSixjQUEzQixFQUEyQ0MsSUFBM0MsRUFBaURDLFNBQWpELEVBQTREO0FBQzFELHdCQUFnQkYsY0FBaEIsb0JBQTBDQyxJQUExQyxlQUFxREUsV0FBVyxDQUFDRCxTQUFELENBQWhFO0FBQ0Q7O0FBRUQsU0FBU0MsV0FBVCxDQUFxQkUsT0FBckIsRUFBOEI7QUFDNUIsTUFBTUMsSUFBSSxHQUFHLElBQUlDLElBQUosQ0FBU0YsT0FBVCxDQUFiO0FBQ0EsTUFBTUcsUUFBUSxHQUFHRixJQUFJLENBQUNHLE9BQUwsRUFBakI7O0FBRUEsTUFBSUMsS0FBSyxDQUFDRixRQUFELENBQVQsRUFBcUI7QUFDbkIsV0FBT0gsT0FBUDtBQUNEOztBQUVELE1BQU1NLEdBQUcsR0FBR0osSUFBSSxDQUFDSSxHQUFMLEVBQVo7QUFDQSxNQUFNQyxTQUFTLEdBQUdELEdBQUcsR0FBR0gsUUFBeEI7QUFDQSxNQUFNSyxjQUFjLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxTQUFTLEdBQUcsS0FBdkIsQ0FBdkI7QUFDQSxNQUFNSSxZQUFZLEdBQUdGLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxTQUFTLEdBQUcsT0FBdkIsQ0FBckI7O0FBRUEsTUFBSUMsY0FBYyxHQUFHLENBQXJCLEVBQXdCO0FBQ3RCLFdBQU8sVUFBUDtBQUNELEdBRkQsTUFFTyxJQUFJQSxjQUFjLEtBQUssQ0FBdkIsRUFBMEI7QUFDL0IsV0FBTyxjQUFQO0FBQ0QsR0FGTSxNQUVBLElBQUlHLFlBQVksR0FBRyxDQUFuQixFQUFzQjtBQUMzQixxQkFBV0gsY0FBWDtBQUNELEdBRk0sTUFFQSxJQUFJRyxZQUFZLEtBQUssQ0FBckIsRUFBd0I7QUFDN0I7QUFDRCxHQUZNLE1BRUEsSUFBSUEsWUFBWSxHQUFHLENBQW5CLEVBQXNCO0FBQzNCLHFCQUFXQSxZQUFYO0FBQ0QsR0FGTSxNQUVBLElBQUlBLFlBQVksSUFBSSxFQUFwQixFQUF3QjtBQUM3QjtBQUNELEdBRk0sTUFFQSxJQUFJQSxZQUFZLElBQUksRUFBcEIsRUFBd0I7QUFDN0I7QUFDRCxHQUZNLE1BRUEsSUFBSUMsTUFBTSxDQUFDQyxJQUFYLEVBQWlCO0FBQ3RCLFdBQU8sSUFBSUEsSUFBSSxDQUFDQyxjQUFULENBQXdCLE9BQXhCLEVBQWlDQyxNQUFqQyxDQUF3Q2QsSUFBeEMsQ0FBUDtBQUNELEdBRk0sTUFFQTtBQUNMLFdBQU9BLElBQUksQ0FBQ2UsY0FBTCxDQUFvQixPQUFwQixFQUE2QjtBQUNsQ0MsTUFBQUEsR0FBRyxFQUFFLFNBRDZCO0FBRWxDQyxNQUFBQSxJQUFJLEVBQUUsU0FGNEI7QUFHbENDLE1BQUFBLE1BQU0sRUFBRSxLQUgwQjtBQUlsQ0MsTUFBQUEsTUFBTSxFQUFFLFNBSjBCO0FBS2xDQyxNQUFBQSxLQUFLLEVBQUUsU0FMMkI7QUFNbENDLE1BQUFBLElBQUksRUFBRTtBQU40QixLQUE3QixDQUFQO0FBUUQ7QUFDRjs7ZUFFYztBQUNiQyxFQUFBQSw4QkFBOEIsRUFBRSxvQkFEbkI7QUFFYjtBQUNBQyxFQUFBQSxlQUFlLEVBQUUsdUJBSEo7QUFJYkMsRUFBQUEsNEJBQTRCLEVBQUUsc0NBSmpCO0FBS2Isd0JBQXNCL0IsZ0JBTFQ7QUFNYix5QkFBdUJLLGlCQU5WO0FBT2IsbUJBQWlCRCxXQVBKO0FBUWI7QUFDQTtBQUNBLCtCQUE4QiwyQkFWakI7QUFXYixnQ0FBOEIsNEJBWGpCO0FBWWIsVUFBUSxNQVpLO0FBYWIsbUJBQWlCLGVBYko7QUFjYixvQkFBa0IsZ0JBZEw7QUFlYixtQkFBaUIsZUFmSjtBQWdCYixVQUFRLE1BaEJLO0FBaUJiLGdCQUFjLFlBakJEO0FBa0JiLGtCQUFnQixjQWxCSDtBQW1CYixXQUFTLE9BbkJJO0FBb0JiLFdBQVMsT0FwQkk7QUFxQmIsV0FBUyxPQXJCSTtBQXNCYixVQUFRLE1BdEJLO0FBdUJiLGFBQVcsU0F2QkU7QUF3QmIsV0FBUyxPQXhCSTtBQXlCYixlQUFhLFdBekJBO0FBMEJiLFNBQU8sS0ExQk07QUEyQmIsV0FBUyxPQTNCSTtBQTRCYix1QkFBcUIsbUJBNUJSO0FBNkJiLGlCQUFlLGFBN0JGO0FBOEJiLFNBQU87QUE5Qk0sQyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGJvdFNhaWRTb21ldGhpbmcoYXZhdGFySW5pdGlhbHMsIHRleHQsIHRpbWVzdGFtcCkge1xuICByZXR1cm4gYEJvdCAkeyBhdmF0YXJJbml0aWFscyB9IHNhaWQsICR7IHRleHQgfSwgJHsgeE1pbnV0ZXNBZ28odGltZXN0YW1wKSB9YDtcbn1cblxuZnVuY3Rpb24gdXNlclNhaWRTb21ldGhpbmcoYXZhdGFySW5pdGlhbHMsIHRleHQsIHRpbWVzdGFtcCkge1xuICByZXR1cm4gYFVzZXIgJHsgYXZhdGFySW5pdGlhbHMgfSBzYWlkLCAkeyB0ZXh0IH0sICR7IHhNaW51dGVzQWdvKHRpbWVzdGFtcCkgfWA7XG59XG5cbmZ1bmN0aW9uIHhNaW51dGVzQWdvKGRhdGVTdHIpIHtcbiAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKGRhdGVTdHIpO1xuICBjb25zdCBkYXRlVGltZSA9IGRhdGUuZ2V0VGltZSgpO1xuXG4gIGlmIChpc05hTihkYXRlVGltZSkpIHtcbiAgICByZXR1cm4gZGF0ZVN0cjtcbiAgfVxuXG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gIGNvbnN0IGRlbHRhSW5NcyA9IG5vdyAtIGRhdGVUaW1lO1xuICBjb25zdCBkZWx0YUluTWludXRlcyA9IE1hdGguZmxvb3IoZGVsdGFJbk1zIC8gNjAwMDApO1xuICBjb25zdCBkZWx0YUluSG91cnMgPSBNYXRoLmZsb29yKGRlbHRhSW5NcyAvIDM2MDAwMDApO1xuXG4gIGlmIChkZWx0YUluTWludXRlcyA8IDEpIHtcbiAgICByZXR1cm4gJ0p1c3Qgbm93JztcbiAgfSBlbHNlIGlmIChkZWx0YUluTWludXRlcyA9PT0gMSkge1xuICAgIHJldHVybiAnQSBtaW51dGUgYWdvJztcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPCAxKSB7XG4gICAgcmV0dXJuIGAkeyBkZWx0YUluTWludXRlcyB9IG1pbnV0ZXMgYWdvYDtcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPT09IDEpIHtcbiAgICByZXR1cm4gYEFuIGhvdXIgYWdvYDtcbiAgfSBlbHNlIGlmIChkZWx0YUluSG91cnMgPCA1KSB7XG4gICAgcmV0dXJuIGAkeyBkZWx0YUluSG91cnMgfSBob3VycyBhZ29gO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8PSAyNCkge1xuICAgIHJldHVybiBgVG9kYXlgO1xuICB9IGVsc2UgaWYgKGRlbHRhSW5Ib3VycyA8PSA0OCkge1xuICAgIHJldHVybiBgWWVzdGVyZGF5YDtcbiAgfSBlbHNlIGlmICh3aW5kb3cuSW50bCkge1xuICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgnZW4tVVMnKS5mb3JtYXQoZGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGRhdGUudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywge1xuICAgICAgZGF5OiAnMi1kaWdpdCcsXG4gICAgICBob3VyOiAnMi1kaWdpdCcsXG4gICAgICBob3VyMTI6IGZhbHNlLFxuICAgICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgRkFJTEVEX0NPTk5FQ1RJT05fTk9USUZJQ0FUSU9OOiAnVW5hYmxlIHRvIGNvbm5lY3QuJyxcbiAgLy8gRG8gbm90IGxvY2FsaXplIHtSZXRyeX07IGl0IGlzIGEgcGxhY2Vob2xkZXIgZm9yIFwiUmV0cnlcIi4gRW5nbGlzaCB0cmFuc2xhdGlvbiBzaG91bGQgYmUsIFwiU2VuZCBmYWlsZWQuIFJldHJ5LlwiXG4gIFNFTkRfRkFJTEVEX0tFWTogJ1NlbmQgZmFpbGVkLiB7UmV0cnl9LicsXG4gIFNMT1dfQ09OTkVDVElPTl9OT1RJRklDQVRJT046ICdUYWtpbmcgbG9uZ2VyIHRoYW4gdXN1YWwgdG8gY29ubmVjdC4nLFxuICAnQm90IHNhaWQgc29tZXRoaW5nJzogYm90U2FpZFNvbWV0aGluZyxcbiAgJ1VzZXIgc2FpZCBzb21ldGhpbmcnOiB1c2VyU2FpZFNvbWV0aGluZyxcbiAgJ1ggbWludXRlcyBhZ28nOiB4TWludXRlc0FnbyxcbiAgLy8gJ1tGaWxlIG9mIHR5cGUgJyUxJ10nOiAnW0ZpbGUgb2YgdHlwZSAnJTEnXVwiLFxuICAvLyAnW1Vua25vd24gQ2FyZCAnJTEnXSc6ICdbVW5rbm93biBDYXJkICclMSddJyxcbiAgJ0FkYXB0aXZlIENhcmQgcGFyc2UgZXJyb3InIDogJ0FkYXB0aXZlIENhcmQgcGFyc2UgZXJyb3InLFxuICAnQWRhcHRpdmUgQ2FyZCByZW5kZXIgZXJyb3InOiAnQWRhcHRpdmUgQ2FyZCByZW5kZXIgZXJyb3InLFxuICAnQ2hhdCc6ICdDaGF0JyxcbiAgJ0Rvd25sb2FkIGZpbGUnOiAnRG93bmxvYWQgZmlsZScsXG4gICdNaWNyb3Bob25lIG9mZic6ICdNaWNyb3Bob25lIG9mZicsXG4gICdNaWNyb3Bob25lIG9uJzogJ01pY3JvcGhvbmUgb24nLFxuICAnTGVmdCc6ICdMZWZ0JyxcbiAgJ0xpc3RlbmluZ+KApic6ICdMaXN0ZW5pbmfigKYnLFxuICAnTmV3IG1lc3NhZ2VzJzogJ05ldyBtZXNzYWdlcycsXG4gICdSaWdodCc6ICdSaWdodCcsXG4gICdyZXRyeSc6ICdyZXRyeScsXG4gICdSZXRyeSc6ICdSZXRyeScsXG4gICdTZW5kJzogJ1NlbmQnLFxuICAnU2VuZGluZyc6ICdTZW5kaW5nJyxcbiAgJ1NwZWFrJzogJ1NwZWFrJyxcbiAgJ1N0YXJ0aW5n4oCmJzogJ1N0YXJ0aW5n4oCmJyxcbiAgJ1RheCc6ICdUYXgnLFxuICAnVG90YWwnOiAnVG90YWwnLFxuICAnVHlwZSB5b3VyIG1lc3NhZ2UnOiAnVHlwZSB5b3VyIG1lc3NhZ2UnLFxuICAnVXBsb2FkIGZpbGUnOiAnVXBsb2FkIGZpbGUnLFxuICAnVkFUJzogJ1ZBVCdcbn1cbiJdfQ==