"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectStackedLayout = exports.default = void 0;

var _glamor = require("glamor");

var _classnames = _interopRequireDefault(require("classnames"));

var _react = _interopRequireDefault(require("react"));

var _botframeworkWebchatCore = require("botframework-webchat-core");

var _Localize = require("../Localization/Localize");

var _Avatar = _interopRequireDefault(require("./Avatar"));

var _Bubble = _interopRequireDefault(require("./Bubble"));

var _connectToWebChat = _interopRequireDefault(require("../connectToWebChat"));

var _SendStatus = _interopRequireDefault(require("./SendStatus"));

var _textFormatToContentType = _interopRequireDefault(require("../Utils/textFormatToContentType"));

var _Timestamp = _interopRequireDefault(require("./Timestamp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _Constants$ActivityCl = _botframeworkWebchatCore.Constants.ActivityClientState,
    SENDING = _Constants$ActivityCl.SENDING,
    SEND_FAILED = _Constants$ActivityCl.SEND_FAILED;
var ROOT_CSS = (0, _glamor.css)({
  display: 'flex',
  '& > .avatar': {
    flexShrink: 0
  },
  '& > .content': {
    flexGrow: 1,
    overflow: 'hidden',
    '& > .row': {
      display: 'flex',
      '& > .bubble, & > .timestamp': {
        flexGrow: 1,
        overflow: 'hidden'
      },
      '& > .filler': {
        flexGrow: 10000,
        flexShrink: 1
      }
    }
  },
  '& > .filler': {
    flexShrink: 0
  },
  '&.from-user': {
    flexDirection: 'row-reverse',
    '& > .content > .row': {
      flexDirection: 'row-reverse'
    }
  }
});

var connectStackedLayout = function connectStackedLayout() {
  for (var _len = arguments.length, selectors = new Array(_len), _key = 0; _key < _len; _key++) {
    selectors[_key] = arguments[_key];
  }

  return _connectToWebChat.default.apply(void 0, [function (_ref, _ref2) {
    var language = _ref.language,
        _ref$styleSet$options = _ref.styleSet.options,
        botAvatarInitials = _ref$styleSet$options.botAvatarInitials,
        userAvatarInitials = _ref$styleSet$options.userAvatarInitials;
    var activity = _ref2.activity;
    return {
      avatarInitials: activity.from && activity.from.role === 'user' ? userAvatarInitials : botAvatarInitials,
      language: language,
      // TODO: [P4] We want to deprecate botAvatarInitials/userAvatarInitials because they are not as helpful as avatarInitials
      botAvatarInitials: botAvatarInitials,
      userAvatarInitials: userAvatarInitials
    };
  }].concat(selectors));
};

exports.connectStackedLayout = connectStackedLayout;

var _default = connectStackedLayout(function (_ref3) {
  var avatarInitials = _ref3.avatarInitials,
      language = _ref3.language,
      styleSet = _ref3.styleSet;
  return {
    avatarInitials: avatarInitials,
    language: language,
    styleSet: styleSet
  };
})(function (_ref4) {
  var activity = _ref4.activity,
      avatarInitials = _ref4.avatarInitials,
      children = _ref4.children,
      language = _ref4.language,
      styleSet = _ref4.styleSet,
      timestampClassName = _ref4.timestampClassName;
  var fromUser = activity.from.role === 'user';

  var _ref5 = activity.channelData || {},
      state = _ref5.state;

  var showSendStatus = state === SENDING || state === SEND_FAILED;
  var ariaLabel = (0, _Localize.localize)(fromUser ? 'User said something' : 'Bot said something', language, avatarInitials, activity.text, activity.timestamp);
  var activityDisplayText = activity.channelData && activity.channelData.messageBack && activity.channelData.messageBack.displayText || activity.text;
  return _react.default.createElement("div", {
    className: (0, _classnames.default)(ROOT_CSS + '', styleSet.stackedLayout + '', {
      'from-user': fromUser
    })
  }, _react.default.createElement(_Avatar.default, {
    "aria-hidden": true,
    className: "avatar",
    fromUser: fromUser
  }), _react.default.createElement("div", {
    className: "content"
  }, activity.type === 'typing' ? _react.default.createElement("div", {
    className: "row typing"
  }, children({
    activity: activity,
    attachment: {
      contentType: 'typing'
    }
  }), _react.default.createElement("div", {
    className: "filler"
  })) : !!activityDisplayText && _react.default.createElement("div", {
    className: "row message"
  }, _react.default.createElement(_Bubble.default, {
    "aria-label": ariaLabel,
    className: "bubble",
    fromUser: fromUser
  }, children({
    activity: activity,
    attachment: {
      contentType: (0, _textFormatToContentType.default)(activity.textFormat),
      content: activityDisplayText
    }
  })), _react.default.createElement("div", {
    className: "filler"
  })), (activity.attachments || []).map(function (attachment, index) {
    return _react.default.createElement("div", {
      className: "row attachment",
      key: index
    }, _react.default.createElement(_Bubble.default, {
      className: "attachment bubble",
      fromUser: fromUser,
      key: index
    }, children({
      attachment: attachment
    })));
  }), _react.default.createElement("div", {
    "aria-hidden": true,
    className: "row"
  }, showSendStatus ? _react.default.createElement(_SendStatus.default, {
    activity: activity,
    className: "timestamp"
  }) : _react.default.createElement(_Timestamp.default, {
    activity: activity,
    className: (0, _classnames.default)('timestamp', timestampClassName)
  }), _react.default.createElement("div", {
    className: "filler"
  }))), _react.default.createElement("div", {
    className: "filler"
  }));
});

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BY3Rpdml0eS9TdGFja2VkTGF5b3V0LmpzIl0sIm5hbWVzIjpbIkNvbnN0YW50cyIsIkFjdGl2aXR5Q2xpZW50U3RhdGUiLCJTRU5ESU5HIiwiU0VORF9GQUlMRUQiLCJST09UX0NTUyIsImRpc3BsYXkiLCJmbGV4U2hyaW5rIiwiZmxleEdyb3ciLCJvdmVyZmxvdyIsImZsZXhEaXJlY3Rpb24iLCJjb25uZWN0U3RhY2tlZExheW91dCIsInNlbGVjdG9ycyIsImNvbm5lY3RUb1dlYkNoYXQiLCJsYW5ndWFnZSIsInN0eWxlU2V0Iiwib3B0aW9ucyIsImJvdEF2YXRhckluaXRpYWxzIiwidXNlckF2YXRhckluaXRpYWxzIiwiYWN0aXZpdHkiLCJhdmF0YXJJbml0aWFscyIsImZyb20iLCJyb2xlIiwiY2hpbGRyZW4iLCJ0aW1lc3RhbXBDbGFzc05hbWUiLCJmcm9tVXNlciIsImNoYW5uZWxEYXRhIiwic3RhdGUiLCJzaG93U2VuZFN0YXR1cyIsImFyaWFMYWJlbCIsInRleHQiLCJ0aW1lc3RhbXAiLCJhY3Rpdml0eURpc3BsYXlUZXh0IiwibWVzc2FnZUJhY2siLCJkaXNwbGF5VGV4dCIsInN0YWNrZWRMYXlvdXQiLCJ0eXBlIiwiYXR0YWNobWVudCIsImNvbnRlbnRUeXBlIiwidGV4dEZvcm1hdCIsImNvbnRlbnQiLCJhdHRhY2htZW50cyIsIm1hcCIsImluZGV4Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7NEJBRTBEQSxrQyxDQUFsREMsbUI7SUFBdUJDLE8seUJBQUFBLE87SUFBU0MsVyx5QkFBQUEsVztBQUV4QyxJQUFNQyxRQUFRLEdBQUcsaUJBQUk7QUFDbkJDLEVBQUFBLE9BQU8sRUFBRSxNQURVO0FBR25CLGlCQUFlO0FBQ2JDLElBQUFBLFVBQVUsRUFBRTtBQURDLEdBSEk7QUFPbkIsa0JBQWdCO0FBQ2RDLElB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QyxNQUFBLEdBQUcsRUFBR0E7QUFBdEMsT0FDRSw2QkFBQyxlQUFEO0FBQ0UsTUFBQSxTQUFTLEVBQUMsbUJBRFo7QUFFRSxNQUFBLFFBQVEsRUFBR2xCLFFBRmI7QUFHRSxNQUFBLEdBQUcsRUFBR2tCO0FBSFIsT0FLSXBCLFFBQVEsQ0FBQztBQUFFYyxNQUFBQSxVQUFVLEVBQVZBO0FBQUYsS0FBRCxDQUxaLENBREYsQ0FEK0I7QUFBQSxHQUFqQyxDQWpDSixFQTZDRTtBQUNFLG1CQUFjLElBRGhCO0FBRUUsSUFBQSxTQUFTLEVBQUM7QUFGWixLQUlJVCxjQUFjLEdBQ1osNkJBQUMsbUJBQUQ7QUFBWSxJQUFBLFFBQVEsRUFBR1QsUUFBdkI7QUFBa0MsSUFBQSxTQUFTLEVBQUM7QUFBNUMsSUFEWSxHQUdaLDZCQUFDLGtCQUFEO0FBQVcsSUFBQSxRQUFRLEVBQUdBLFFBQXRCO0FBQWlDLElBQUEsU0FBUyxFQUFHLHlCQUFXLFdBQVgsRUFBd0JLLGtCQUF4QjtBQUE3QyxJQVBOLEVBU0U7QUFBSyxJQUFBLFNBQVMsRUFBQztBQUFmLElBVEYsQ0E3Q0YsQ0FaRixFQXFFRTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsSUFyRUYsQ0FERjtBQXlFRCxDQXZHWSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3NzIH0gZnJvbSAnZ2xhbW9yJztcbmltcG9ydCBjbGFzc05hbWVzIGZyb20gJ2NsYXNzbmFtZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW1wb3J0IHsgQ29uc3RhbnRzIH0gZnJvbSAnYm90ZnJhbWV3b3JrLXdlYmNoYXQtY29yZSc7XG5cbmltcG9ydCB7IGxvY2FsaXplIH0gZnJvbSAnLi4vTG9jYWxpemF0aW9uL0xvY2FsaXplJztcbmltcG9ydCBBdmF0YXIgZnJvbSAnLi9BdmF0YXInO1xuaW1wb3J0IEJ1YmJsZSBmcm9tICcuL0J1YmJsZSc7XG5pbXBvcnQgY29ubmVjdFRvV2ViQ2hhdCBmcm9tICcuLi9jb25uZWN0VG9XZWJDaGF0JztcbmltcG9ydCBTZW5kU3RhdHVzIGZyb20gJy4vU2VuZFN0YXR1cyc7XG5pbXBvcnQgdGV4dEZvcm1hdFRvQ29udGVudFR5cGUgZnJvbSAnLi4vVXRpbHMvdGV4dEZvcm1hdFRvQ29udGVudFR5cGUnO1xuaW1wb3J0IFRpbWVzdGFtcCBmcm9tICcuL1RpbWVzdGFtcCc7XG5cbmNvbnN0IHsgQWN0aXZpdHlDbGllbnRTdGF0ZTogeyBTRU5ESU5HLCBTRU5EX0ZBSUxFRCB9IH0gPSBDb25zdGFudHM7XG5cbmNvbnN0IFJPT1RfQ1NTID0gY3NzKHtcbiAgZGlzcGxheTogJ2ZsZXgnLFxuXG4gICcmID4gLmF2YXRhcic6IHtcbiAgICBmbGV4U2hyaW5rOiAwXG4gIH0sXG5cbiAgJyYgPiAuY29udGVudCc6IHtcbiAgICBmbGV4R3JvdzogMSxcbiAgICBvdmVyZmxvdzogJ2hpZGRlbicsXG5cbiAgICAnJiA+IC5yb3cnOiB7XG4gICAgICBkaXNwbGF5OiAnZmxleCcsXG5cbiAgICAgICcmID4gLmJ1YmJsZSwgJiA+IC50aW1lc3RhbXAnOiB7XG4gICAgICAgIGZsZXhHcm93OiAxLFxuICAgICAgICBvdmVyZmxvdzogJ2hpZGRlbidcbiAgICAgIH0sXG5cbiAgICAgICcmID4gLmZpbGxlcic6IHtcbiAgICAgICAgZmxleEdyb3c6IDEwMDAwLFxuICAgICAgICBmbGV4U2hyaW5rOiAxXG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gICcmID4gLmZpbGxlcic6IHtcbiAgICBmbGV4U2hyaW5rOiAwXG4gIH0sXG5cbiAgJyYuZnJvbS11c2VyJzoge1xuICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZScsXG5cbiAgICAnJiA+IC5jb250ZW50ID4gLnJvdyc6IHtcbiAgICAgIGZsZXhEaXJlY3Rpb246ICdyb3ctcmV2ZXJzZSdcbiAgICB9XG4gIH1cbn0pO1xuXG5jb25zdCBjb25uZWN0U3RhY2tlZExheW91dCA9ICguLi5zZWxlY3RvcnMpID0+IGNvbm5lY3RUb1dlYkNoYXQoXG4gICh7XG4gICAgbGFuZ3VhZ2UsXG4gICAgc3R5bGVTZXQ6IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgYm90QXZhdGFySW5pdGlhbHMsXG4gICAgICAgIHVzZXJBdmF0YXJJbml0aWFsc1xuICAgICAgfVxuICAgIH1cbiAgfSwgeyBhY3Rpdml0eSB9KSA9PiAoe1xuICAgIGF2YXRhckluaXRpYWxzOiBhY3Rpdml0eS5mcm9tICYmIGFjdGl2aXR5LmZyb20ucm9sZSA9PT0gJ3VzZXInID8gdXNlckF2YXRhckluaXRpYWxzIDogYm90QXZhdGFySW5pdGlhbHMsXG4gICAgbGFuZ3VhZ2UsXG5cbiAgICAvLyBUT0RPOiBbUDRdIFdlIHdhbnQgdG8gZGVwcmVjYXRlIGJvdEF2YXRhckluaXRpYWxzL3VzZXJBdmF0YXJJbml0aWFscyBiZWNhdXNlIHRoZXkgYXJlIG5vdCBhcyBoZWxwZnVsIGFzIGF2YXRhckluaXRpYWxzXG4gICAgYm90QXZhdGFySW5pdGlhbHMsXG4gICAgdXNlckF2YXRhckluaXRpYWxzXG4gIH0pLFxuICAuLi5zZWxlY3RvcnNcbik7XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3RTdGFja2VkTGF5b3V0KFxuICAoe1xuICAgIGF2YXRhckluaXRpYWxzLFxuICAgIGxhbmd1YWdlLFxuICAgIHN0eWxlU2V0XG4gIH0pID0+ICh7XG4gICAgYXZhdGFySW5pdGlhbHMsXG4gICAgbGFuZ3VhZ2UsXG4gICAgc3R5bGVTZXRcbiAgfSlcbikoXG4gICh7XG4gICAgYWN0aXZpdHksXG4gICAgYXZhdGFySW5pdGlhbHMsXG4gICAgY2hpbGRyZW4sXG4gICAgbGFuZ3VhZ2UsXG4gICAgc3R5bGVTZXQsXG4gICAgdGltZXN0YW1wQ2xhc3NOYW1lXG4gIH0pID0+IHtcbiAgICBjb25zdCBmcm9tVXNlciA9IGFjdGl2aXR5LmZyb20ucm9sZSA9PT0gJ3VzZXInO1xuICAgIGNvbnN0IHsgc3RhdGUgfSA9IGFjdGl2aXR5LmNoYW5uZWxEYXRhIHx8IHt9O1xuICAgIGNvbnN0IHNob3dTZW5kU3RhdHVzID0gc3RhdGUgPT09IFNFTkRJTkcgfHwgc3RhdGUgPT09IFNFTkRfRkFJTEVEO1xuICAgIGNvbnN0IGFyaWFMYWJlbCA9IGxvY2FsaXplKGZyb21Vc2VyID8gJ1VzZXIgc2FpZCBzb21ldGhpbmcnIDogJ0JvdCBzYWlkIHNvbWV0aGluZycsIGxhbmd1YWdlLCBhdmF0YXJJbml0aWFscywgYWN0aXZpdHkudGV4dCwgYWN0aXZpdHkudGltZXN0YW1wKTtcbiAgICBjb25zdCBhY3Rpdml0eURpc3BsYXlUZXh0ID1cbiAgICAgIChcbiAgICAgICAgYWN0aXZpdHkuY2hhbm5lbERhdGFcbiAgICAgICAgJiYgYWN0aXZpdHkuY2hhbm5lbERhdGEubWVzc2FnZUJhY2tcbiAgICAgICAgJiYgYWN0aXZpdHkuY2hhbm5lbERhdGEubWVzc2FnZUJhY2suZGlzcGxheVRleHRcbiAgICAgICkgfHwgYWN0aXZpdHkudGV4dDtcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2XG4gICAgICAgIGNsYXNzTmFtZT17IGNsYXNzTmFtZXMoXG4gICAgICAgICAgUk9PVF9DU1MgKyAnJyxcbiAgICAgICAgICBzdHlsZVNldC5zdGFja2VkTGF5b3V0ICsgJycsXG4gICAgICAgICAgeyAnZnJvbS11c2VyJzogZnJvbVVzZXIgfVxuICAgICAgICApIH1cbiAgICAgID5cbiAgICAgICAgPEF2YXRhclxuICAgICAgICAgIGFyaWEtaGlkZGVuPXsgdHJ1ZSB9XG4gICAgICAgICAgY2xhc3NOYW1lPVwiYXZhdGFyXCJcbiAgICAgICAgICBmcm9tVXNlcj17IGZyb21Vc2VyIH1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250ZW50XCI+XG4gICAgICAgICAge1xuICAgICAgICAgICAgYWN0aXZpdHkudHlwZSA9PT0gJ3R5cGluZycgP1xuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyB0eXBpbmdcIj5cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBjaGlsZHJlbih7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5LFxuICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50OiB7IGNvbnRlbnRUeXBlOiAndHlwaW5nJyB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImZpbGxlclwiIC8+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgOiAhIWFjdGl2aXR5RGlzcGxheVRleHQgJiZcbiAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb3cgbWVzc2FnZVwiPlxuICAgICAgICAgICAgICAgIDxCdWJibGVcbiAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9eyBhcmlhTGFiZWwgfVxuICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnViYmxlXCJcbiAgICAgICAgICAgICAgICAgIGZyb21Vc2VyPXsgZnJvbVVzZXIgfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4oe1xuICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5LFxuICAgICAgICAgICAgICAgICAgICAgIGF0dGFjaG1lbnQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRUeXBlOiB0ZXh0Rm9ybWF0VG9Db250ZW50VHlwZShhY3Rpdml0eS50ZXh0Rm9ybWF0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGFjdGl2aXR5RGlzcGxheVRleHRcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgPC9CdWJibGU+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWxsZXJcIiAvPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICB9XG4gICAgICAgICAge1xuICAgICAgICAgICAgKGFjdGl2aXR5LmF0dGFjaG1lbnRzIHx8IFtdKS5tYXAoKGF0dGFjaG1lbnQsIGluZGV4KSA9PlxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvdyBhdHRhY2htZW50XCIga2V5PXsgaW5kZXggfT5cbiAgICAgICAgICAgICAgICA8QnViYmxlXG4gICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJhdHRhY2htZW50IGJ1YmJsZVwiXG4gICAgICAgICAgICAgICAgICBmcm9tVXNlcj17IGZyb21Vc2VyIH1cbiAgICAgICAgICAgICAgICAgIGtleT17IGluZGV4IH1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICB7IGNoaWxkcmVuKHsgYXR0YWNobWVudCB9KSB9XG4gICAgICAgICAgICAgICAgPC9CdWJibGU+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICBhcmlhLWhpZGRlbj17IHRydWUgfVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicm93XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICB7IHNob3dTZW5kU3RhdHVzID9cbiAgICAgICAgICAgICAgICA8U2VuZFN0YXR1cyBhY3Rpdml0eT17IGFjdGl2aXR5IH0gY2xhc3NOYW1lPVwidGltZXN0YW1wXCIgLz5cbiAgICAgICAgICAgICAgOlxuICAgICAgICAgICAgICAgIDxUaW1lc3RhbXAgYWN0aXZpdHk9eyBhY3Rpdml0eSB9IGNsYXNzTmFtZT17IGNsYXNzTmFtZXMoJ3RpbWVzdGFtcCcsIHRpbWVzdGFtcENsYXNzTmFtZSkgfSAvPlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWxsZXJcIiAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmaWxsZXJcIiAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxuKVxuXG5leHBvcnQgeyBjb25uZWN0U3RhY2tlZExheW91dCB9XG4iXX0=