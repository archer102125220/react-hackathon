{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _callee;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _jsonwebtoken = require(\"jsonwebtoken\");\n\nvar _mathRandom = _interopRequireDefault(require(\"math-random\"));\n\nvar _updateConnectionStatus = _interopRequireWildcard(require(\"../actions/updateConnectionStatus\"));\n\nvar _createPromiseQueue = _interopRequireDefault(require(\"../createPromiseQueue\"));\n\nvar _botframeworkDirectlinejs = require(\"botframework-directlinejs\");\n\nvar _connect = require(\"../actions/connect\");\n\nvar _disconnect = require(\"../actions/disconnect\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator.default.mark(observeAndPutConnectionStatusUpdate),\n    _marked2 =\n/*#__PURE__*/\n_regenerator.default.mark(connectSaga),\n    _marked3 =\n/*#__PURE__*/\n_regenerator.default.mark(_callee);\n\nvar CONNECTING = _botframeworkDirectlinejs.ConnectionStatus.Connecting,\n    ONLINE = _botframeworkDirectlinejs.ConnectionStatus.Online,\n    EXPIRED_TOKEN = _botframeworkDirectlinejs.ConnectionStatus.ExpiredToken,\n    FAILED_TO_CONNECT = _botframeworkDirectlinejs.ConnectionStatus.FailedToConnect,\n    ENDED = _botframeworkDirectlinejs.ConnectionStatus.Ended;\n\nfunction randomUserID() {\n  return \"r_\".concat((0, _mathRandom.default)().toString(36).substr(2, 10));\n}\n\nfunction observeAndPutConnectionStatusUpdate(directLine) {\n  var connectionStatusQueue, connectionStatusSubscription, connectionStatus;\n  return _regenerator.default.wrap(function observeAndPutConnectionStatusUpdate$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          connectionStatusQueue = (0, _createPromiseQueue.default)();\n          connectionStatusSubscription = directLine.connectionStatus$.subscribe({\n            next: connectionStatusQueue.push\n          });\n          _context.prev = 2;\n\n        case 3:\n          _context.next = 5;\n          return (0, _effects.call)(connectionStatusQueue.shift);\n\n        case 5:\n          connectionStatus = _context.sent;\n          _context.next = 8;\n          return (0, _effects.put)((0, _updateConnectionStatus.default)(connectionStatus));\n\n        case 8:\n          _context.next = 3;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          connectionStatusSubscription.unsubscribe();\n          return _context.finish(10);\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this, [[2,, 10, 13]]);\n}\n\nfunction negativeUpdateConnectionStatusAction(_ref) {\n  var payload = _ref.payload,\n      type = _ref.type;\n\n  if (type === _updateConnectionStatus.UPDATE_CONNECTION_STATUS) {\n    var connectionStatus = payload.connectionStatus;\n    return connectionStatus !== CONNECTING && connectionStatus !== ONLINE;\n  }\n}\n\nfunction rectifyUserID(directLine, userIDFromAction) {\n  var token = directLine.token;\n\n  var _ref2 = (0, _jsonwebtoken.decode)(token) || {},\n      userIDFromToken = _ref2.user;\n\n  if (userIDFromToken) {\n    if (userIDFromAction && userIDFromAction !== userIDFromToken) {\n      console.warn('Web Chat: user ID is both specified in the Direct Line token and passed in, will use the user ID from the token.');\n    }\n\n    return userIDFromToken;\n  } else if (userIDFromAction) {\n    if (typeof userIDFromAction !== 'string') {\n      console.warn('Web Chat: user ID must be a string.');\n      return randomUserID();\n    } else if (/^dl_/.test(userIDFromAction)) {\n      console.warn('Web Chat: user ID prefixed with \"dl_\" is reserved and must be embedded into the Direct Line token to prevent forgery.');\n      return randomUserID();\n    }\n  } else {\n    return randomUserID();\n  }\n\n  return userIDFromAction;\n}\n\nfunction connectSaga(directLine) {\n  var activitySubscription, _ref3, connectionStatus;\n\n  return _regenerator.default.wrap(function connectSaga$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          // DirectLineJS start the connection only after the first subscriber for activity$, but not connectionStatus$\n          activitySubscription = directLine.activity$.subscribe({\n            next: function next() {\n              return 0;\n            }\n          });\n          _context2.prev = 1;\n\n        case 2:\n          _context2.next = 4;\n          return (0, _effects.take)(_updateConnectionStatus.UPDATE_CONNECTION_STATUS);\n\n        case 4:\n          _ref3 = _context2.sent;\n          connectionStatus = _ref3.payload.connectionStatus;\n\n          if (!(connectionStatus === ONLINE)) {\n            _context2.next = 10;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", function () {\n            activitySubscription.unsubscribe();\n            directLine.end();\n          });\n\n        case 10:\n          if (!(connectionStatus === ENDED || connectionStatus === EXPIRED_TOKEN || connectionStatus === FAILED_TO_CONNECT)) {\n            _context2.next = 12;\n            break;\n          }\n\n          throw new Error('Failed to connect');\n\n        case 12:\n          _context2.next = 2;\n          break;\n\n        case 14:\n          _context2.prev = 14;\n          _context2.next = 17;\n          return (0, _effects.cancelled)();\n\n        case 17:\n          if (!_context2.sent) {\n            _context2.next = 20;\n            break;\n          }\n\n          activitySubscription.unsubscribe();\n          throw new Error('Cancelled');\n\n        case 20:\n          return _context2.finish(14);\n\n        case 21:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this, [[1,, 14, 21]]);\n}\n\nfunction _callee() {\n  var _ref4, _ref4$payload, directLine, userIDFromAction, username, updateConnectionStatusTask, meta, endDirectLine, terminateAction;\n\n  return _regenerator.default.wrap(function _callee$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return (0, _effects.take)(_connect.CONNECT);\n\n        case 2:\n          _ref4 = _context3.sent;\n          _ref4$payload = _ref4.payload;\n          directLine = _ref4$payload.directLine;\n          userIDFromAction = _ref4$payload.userID;\n          username = _ref4$payload.username;\n          _context3.next = 9;\n          return (0, _effects.fork)(observeAndPutConnectionStatusUpdate, directLine);\n\n        case 9:\n          updateConnectionStatusTask = _context3.sent;\n          _context3.prev = 10;\n          meta = {\n            userID: rectifyUserID(directLine, userIDFromAction),\n            username: username\n          };\n          endDirectLine = void 0;\n          _context3.next = 15;\n          return (0, _effects.put)({\n            type: _connect.CONNECT_PENDING,\n            meta: meta\n          });\n\n        case 15:\n          _context3.prev = 15;\n          _context3.next = 18;\n          return (0, _effects.call)(connectSaga, directLine);\n\n        case 18:\n          endDirectLine = _context3.sent;\n          _context3.next = 26;\n          break;\n\n        case 21:\n          _context3.prev = 21;\n          _context3.t0 = _context3[\"catch\"](15);\n          _context3.next = 25;\n          return (0, _effects.put)({\n            type: _connect.CONNECT_REJECTED,\n            error: true,\n            meta: meta,\n            payload: _context3.t0\n          });\n\n        case 25:\n          return _context3.abrupt(\"continue\", 49);\n\n        case 26:\n          _context3.prev = 26;\n          _context3.next = 29;\n          return (0, _effects.put)({\n            type: _connect.CONNECT_FULFILLING,\n            meta: meta,\n            payload: {\n              directLine: directLine\n            }\n          });\n\n        case 29:\n          _context3.next = 31;\n          return (0, _effects.put)({\n            type: _connect.CONNECT_FULFILLED,\n            meta: meta,\n            payload: {\n              directLine: directLine\n            }\n          });\n\n        case 31:\n          _context3.next = 33;\n          return (0, _effects.take)([_disconnect.DISCONNECT, negativeUpdateConnectionStatusAction]);\n\n        case 33:\n          terminateAction = _context3.sent;\n          _context3.next = 36;\n          return (0, _effects.put)({\n            type: _disconnect.DISCONNECT_PENDING\n          });\n\n        case 36:\n          endDirectLine();\n\n          if (!(terminateAction.type === _disconnect.DISCONNECT)) {\n            _context3.next = 40;\n            break;\n          }\n\n          _context3.next = 40;\n          return (0, _effects.take)(negativeUpdateConnectionStatusAction);\n\n        case 40:\n          _context3.prev = 40;\n          _context3.next = 43;\n          return (0, _effects.put)({\n            type: _disconnect.DISCONNECT_FULFILLED\n          });\n\n        case 43:\n          endDirectLine();\n          return _context3.finish(40);\n\n        case 45:\n          _context3.prev = 45;\n          _context3.next = 48;\n          return (0, _effects.cancel)(updateConnectionStatusTask);\n\n        case 48:\n          return _context3.finish(45);\n\n        case 49:\n          _context3.next = 0;\n          break;\n\n        case 51:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this, [[10,, 45, 49], [15, 21], [26,, 40, 45]]);\n}","map":null,"metadata":{},"sourceType":"script"}